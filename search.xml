<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Android系统的耦合与解耦</title>
      <link href="/2024/10/15/Android%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%80%A6%E5%90%88%E4%B8%8E%E8%A7%A3%E8%80%A6/"/>
      <url>/2024/10/15/Android%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%80%A6%E5%90%88%E4%B8%8E%E8%A7%A3%E8%80%A6/</url>
      
        <content type="html"><![CDATA[<p><img src="/2024/10/15/Android%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%80%A6%E5%90%88%E4%B8%8E%E8%A7%A3%E8%80%A6/output3.jpg" alt="output3"></p><h1><span id="android系统的耦合与解耦">Android系统的耦合与解耦</span></h1><blockquote><p>从应用到系统开发，代码量从几十万行增长到几千万行，开发框架以及编译环境等与应用开发也不一样。所以如果要学习Android系统开发，我们需要先了解对应的开发框架及工具链。</p></blockquote><h1><span id="1android系统架构">1.Android系统架构</span></h1><p>AOSP全称是Android Open Source Project，中文译为“Android 开放源代码项目”。手机厂商每年会基于Google开放的最新代码进行适配定制，开发属于自己的OS版本。</p><p>我们根据Android的架构图来看看Android系统架构的设计：</p><p><img src="/2024/10/15/Android%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%80%A6%E5%90%88%E4%B8%8E%E8%A7%A3%E8%80%A6/1280X1280.PNG" alt="1280X1280"></p><h2><span id="应用"><strong>应用</strong></span></h2><p>对照架构图，我们从上到下来看。在应用框架层上面应该还有一层，就是诸多的应用。这些应用可以分为2类：一类是系统应用，拥有高的系统权限，可以调用系统提供的高权限接口，例如打电话、短信、设置等应用；另外一类就是非系统应用，与第三方应用一样，例如定制一些便签、运动健康、视频播放等应用。</p><h2><span id="框架层framework">框架层（framework）</span></h2><p>接下来的第一层就是应用框架层， 应用框架最常被应用开发者使用，对应用提供标准的API来调用系统的能力，从而实现相关的业务功能。 我们在代码编译时，通常会依赖Android SDK的android.jar空包，保证能通过编译。但需要注意的是android.jar具体的实现都在框架层中，实际运行时调用的都是系统中的类。</p><h2><span id="binder-ipc">Binder (IPC)</span></h2><p>第二层是Binder IPC。有了 Binder 进程间通信 (IPC) 机制，应用框架就能跨越进程边界并调用 Android 系统服务代码。 由于系统的很多服务都是运行在System Server进程，但是集成到应用的SDK代码是运行在应用的进程，所以需要通过Binder的方式来实现跨进程间的通信。</p><h2><span id="系统服务层-system-services"><strong>系统服务层 (system services)</strong></span></h2><p>第三层是系统服务层。 系统服务专注于特定功能的模块化组件，例如窗口管理器、搜索服务或通知管理器。例如我们熟悉的AMS、WMS、PMS等，都运行在系统服务层。</p><h2><span id="硬件抽象层-hal">硬件抽象层 (HAL)</span></h2><p>第四层是硬件抽象层。Google 在Android 8.0 里一个名为“Treble”的项目中设计了 HAL层，目的是让制造商能够以更低成本、更轻松快速地将设备更新到新版 Android 系统。在这种新架构中， HAL 接口定义语言指定了 HAL 和其用户之间的接口，让用户无需重新构建 HAL，就能替换 Android 框架。</p><h2><span id="linux内核层-kernel">Linux内核层 (KERNEL)</span></h2><p>最后一层是Linux内核层。 Google在官网介绍的开发Android设备驱动程序与开发典型的 Linux 设备驱动程序类似。但Android 使用的 Linux 内核版本包含一些特殊的补充功能，例如低内存终止守护进程、唤醒锁定、Binder IPC 驱动程序等，对于移动嵌入式平台，这些是非常重要的功能。</p><h1><span id="2android系统的耦合问题">2.Android系统的耦合问题</span></h1><p>既然Android系统已经有了规范的架构设计，为什么定制Android系统还会产生耦合的问题呢？</p><p>由于手机产品涉及软硬结合，所以一般会采用 <a href="https://baike.baidu.com/item/IPD?fromModule=lemma_search-box">IPD 产品开发流程</a>，研发一款手机的时间通常需要3 - 12个月的时间，并按照每款手机项目单独立项跟踪。迫于交付压力，再加上缺少有效的架构设计及守护等问题，开发人员会对系统做各种各样“花式的魔改”，最典型的是后面这3种耦合场景。</p><h2><span id="场景1应用之间的耦合"><strong>场景1：应用之间的耦合</strong></span></h2><p>理论上来说，应用之间都是相对独立的。但是在定制系统中，有一些应用在运行时存在相互依赖，例如桌面与负一屏（基于桌面向右滑动后的快捷入口）。这里应用A在运行时可能需要调用应用B提供的某些方法，才能保证功能正常运行，如下图所示。</p><p>![1280X1280 (1)](.&#x2F;Android系统的耦合与解耦&#x2F;1280X1280 (1).PNG)</p><p>这里看起来似乎合理，编译上没有依赖，运行时也是通过标准的API调用。但关键的问题是不同项目上的功能有差异，依赖的API会有变化，并且应用之间并没有做好兼容性的处理，这样导致应用B不存在时，应用A无法正常运行。你可以结合下图来理解。</p><p>![1280X1280 (2)](.&#x2F;Android系统的耦合与解耦&#x2F;1280X1280 (2).PNG)</p><h2><span id="场景2应用与框架之间的耦合"><strong>场景2：应用与框架之间的耦合</strong></span></h2><p>接下来，我们来看第二种典型的耦合场景，应用与框架之间的耦合。</p><p>我们需要依赖Android的SDK来开发。因为Google会保持SDK接口的稳定及兼容，所以基于标准SDK开发的应用，才能运行在各个大版本的Android系统中。</p><p>但是在框架里面还有一些类被标识了@hide，或者有些类属于com.android.internal中的类，这些都是标准的SDK不会提供的。</p><p>但是，厂商可以编译生成完整的android.jar包，这样应用就可以调用到这些非公开的接口，以便实现更加丰富的功能。当然还有一些应用采用另外一种方法，就是使用反射的形式。你可以结合后面的示意图来理解。</p><p>![1280X1280 (3)](.&#x2F;Android系统的耦合与解耦&#x2F;1280X1280 (3).PNG)</p><p>由于这部分API，Google在大版本的迭代中并不一定保证兼容，所以这也意味着 一旦使用这个特殊的Jar包的应用，就与特定的大版本绑定了。应用需要针对每一个大版本都维护一个特定的APK。</p><h2><span id="场景3框架之间的耦合"><strong>场景3：框架之间的耦合</strong></span></h2><p>第三种典型的耦合场景是框架之间的耦合，这里的框架耦合指的是<strong>厂商扩展的代码</strong>与<strong>框架</strong>之间的耦合。</p><p>为了扩展系统的功能，定制Android系统可以在框架中添加一些代码，例如可以在AMS里面的Activity生命周期回调增加一些统计代码，就能统计到应用界面的一些执行情况。这些能力是三方应用无法实现的功能，是厂商定制应用的优势。你可以参考后面的示意图来理解。</p><p>![1280X1280 (4)](.&#x2F;Android系统的耦合与解耦&#x2F;1280X1280 (4).PNG)</p><p>但是缺少规范化的管理及灵活的插桩设计，也会产生耦合问题。我们都知道Google每年都会更新AOSP基线代码，框架之间的耦合会导致扩展的代码与框架代码强关联。一方面这些代码只能跟随着框架代码一起维护，无法做到独立维护；另外一方面当代码有更新时，维护成本也非常高。</p><h2><span id="总结"><strong>总结</strong></span></h2><p>![1280X1280 (5)](.&#x2F;Android系统的耦合与解耦&#x2F;1280X1280 (5).PNG)</p><h1><span id="3耦合带来的问题"><strong>3.耦合带来的问题</strong></span></h1><p>除了前面提到的定制Android系统的耦合问题，耦合也会影响到团队效率以及产品质量，接下来重点探讨三个常见问题。</p><h2><span id="问题1大量重复的代码合并工作"><strong>问题1：大量重复的代码合并工作</strong></span></h2><p>前面提到Google每年都会升级一个Android的大版本，对于厂商来说，他们其实拿到的是第三手代码。前面还有一个上游——芯片平台。为了帮助你理解，我画了后面这张示意图。</p><p>![1280X1280 (6)](.&#x2F;Android系统的耦合与解耦&#x2F;1280X1280 (6).PNG)</p><p>因为是第三手代码，为了保证本地代码能及时同步上游的最新代码，厂商需要定期去同步上游的代码，大版本可能是每年一次，补丁Patch可能是2周一次。由于侵入性的修改，容易导致代码冲突的出现，特别是每次的大版本更新。</p><p>另外，由于各种耦合的问题，通常最后量产版本时需要拉去独立的MP分支。这样，并行的项目越多时，合并代码的工作量就会呈指数级爆发。</p><h2><span id="问题2并行维护多个版本"><strong>问题2：并行维护多个版本</strong></span></h2><p>由于应用与架构的耦合问题，会让不同项目集成难度升高。因为应用无法做到一个apk适配多个项目，这样对于应用来说往往需要同时维护3-5个版本，并且通常也是采用拉取分支的形式，一个分支出一个项目版本的APK。</p><p>![1280X1280 (7)](.&#x2F;Android系统的耦合与解耦&#x2F;1280X1280 (7).PNG)</p><p>同时，维护多个版本带来了大量重复性的工作。例如当修复一个Bug时，需要同步到若干个分支中，并且带给测试同学的压力也非常大。由于每个分支的代码都不是完全一致的，需要做回归测试时，工作量也会翻倍。</p><h2><span id="问题3未知的产品质量"><strong>问题3：“未知”的产品质量</strong></span></h2><p>由于代码的耦合问题，非常容易导致修改代码出现连带问题。所以开发同学会选择尽可能少修改代码，更别谈去做一些中大型的代码重构。在机型数量越来越多的状态下，技术复杂度越来越高。两种压力的共同作用下，代码修改越多，代码重构就变得越来越难，代码质量完全无法把控。</p><p>另外，对于产品的质量也带来了非常大的挑战。前面提到的多项目、多版本的问题，导致在最后集成阶段需要大量的回归测试，然而在缺乏高质量的自动化测试覆盖下，仅靠人工很难进行全面的验证，这样就非常容易导致问题流到线上用户手中。</p><h2><span id="总结">总结</span></h2><p>由于耦合的问题，团队需要完成大量重复、机械性的代码合并工作，也需要同时维护多个并行的版本。开发同学淹没在数不尽的分支合并任务里，测试同学淹没在数不尽的黑盒测试中，团队无法把精力投入到代码优化和更多产品质量优化工作上，时间一久，就会给系统埋下诸多隐患。</p><h1><span id="4android系统解耦">4.Android系统解耦</span></h1><p>下面针对这些耦合问题，探讨具体有哪些针对性的解耦策略。</p><h2><span id="整机组件化"><strong>整机组件化</strong></span></h2><p>我们知道Android的架构设计本身就是采用了分层组件化的方式，只是由于厂商在定制的过程中，没有遵循架构设计来扩展，才出现了腐化。典型的问题包括应用间的耦合、应用与框架的耦合以及框架与框架间的耦合，如下图所示。</p><p><img src="/2024/10/15/Android%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%80%A6%E5%90%88%E4%B8%8E%E8%A7%A3%E8%80%A6/%E4%B8%8B%E8%BD%BD.png" alt="下载"></p><p>但是定制就意味着增加代码，所以关键问题是如何管理扩展的代码，才能把对原生代码的侵入降到最低，同时又要让系统更独立地演进。</p><p>其实解决方法也很简单，就是沿用 Android系统的架构，让我们自己扩展的代码也形成组件，能够在Android原生系统之上灵活插拔，你可以对照下图来理解。</p><p>![下载 (1)](.&#x2F;Android系统的耦合与解耦&#x2F;下载 (1).png)</p><p>可以看出，厂商主要定制的代码分布在应用、框架与内核层。我们分别从这几层来看看组件化改造的思路。</p><h3><span id="应用层"><strong>应用层</strong></span></h3><p>第一个是应用层。应用层其实分2种类型，第一种是完全自己定制的应用，第二种是扩展AOSP中原有的应用（例如桌面、电话本、短信等）。</p><p>第一种类型，应用本来的构建就是独立的二进制组件（APK），但就像上节课我们提到的，这样组件无法复用，效果大打折扣。所以我们需要解耦，不让应用与特定的系统版本耦合。</p><p>特别需要注意的是第二种类型，扩展AOSP的应用。</p><p>由于Google在大版本升级的时候，也可能会同步升级这些应用的代码，所以如果想让同步的代码是最新的，就需要保证对原生代码的扩展是相对独立的，否则也会有不少同步代码的工作量。</p><p>而很多厂商的处理方法是基于某个Android版本扩展以后就独立演进，不再同步上游的代码。这种方式有得有失，好处是减少了同步的工作量（Google有些应用可能在某个大版本变化比较大，例如短信从MMS升级到Message，基本变成2个应用），坏处是不能及时同步到一些新的代码。</p><p>总的来说，应用本身天然就是以二进制组件的形式与整机集成。所以 针对应用层组件化关键的举措就是解耦，让组件能够复用。</p><h3><span id="框架与内核层"><strong>框架与内核层</strong></span></h3><p>框架与内核层的修改与应用层的修改恰恰相反，大多数的扩展修改都比较零散，而且都是直接在AOSP原生的文件中直接修改的。有些比较独立的扩展，会采用新增文件或者新增方法放到AOSP文件尾部的形式，但是有些修改就不得不在原生代码方法中间增加一些代码，这也就是我们上一节课说的框架与框架之间的耦合。</p><p>那么，针对框架的修改要如何做组件化的设计呢？我推荐的方式就是 减少对原生代码的修改，将扩展的代码独立成二进制的文件（Jar、So、Apex）。</p><p>要满足这个设计，需要先满足两个前置条件。</p><p>第一个条件，能从散落在各个源码修改的文件中的扩展代码梳理出逻辑内聚的组件。举个例子，假如扩展一个应用保活的特性，需要在AOSP中的AMS、PMS等类中插入一些代码，如果我们要抽取一个应用保活的组件，就得先把这个特性涉及到修改的地方都分析出来。</p><p>第二个条件是需要设法将更多的修改独立出来，尽量减少对源码的修改，我们在后面的解耦设计中，还会详细讨论这个问题。</p><p>对于框架代码扩展来说，由于修改比较零散，而且对AOSP源文件的侵入性修改，相比应用来说，它的组件化改造挑战更大。</p><h2><span id="组件化解耦"><strong>组件化解耦</strong></span></h2><p>前面我们讨论了整机组件化整体的设计思路，接下来我们再一起看看具体的解耦方法。</p><h3><span id="应用与应用解耦"><strong>应用与应用解耦</strong></span></h3><p>首先来看应用与应用间的解耦。 应用间的解耦重点是约定好双方的交互协议以及保证API的稳定及兼容性，你可以参考后面的示意图来理解。</p><p>![下载 (2)](.&#x2F;Android系统的耦合与解耦&#x2F;下载 (2).png)</p><p>首先需要保证API的稳定，尽可能保证扩展但不修改，避免在多个版本出现不兼容问题。另外，当依赖的应用不存在时，调用方需要保证功能的兼容性，可以将相关的特性屏蔽。</p><p>特别需要注意的是，封装API的时候最好是 基于数据的封装，而不是基于界面的封装。例如应用B需要展示应用A的一些内容，如果应用B直接通过API获取应用A的View来展示，就可能导致当应用A与应用B之间需要统一视觉风格时，版本之间会存在强依赖。但如果只是数据的依赖，则会更加稳定，应用B的视觉风格变化不依赖应用A的修改。</p><h3><span id="应用与框架解耦">应用与框架解耦</span></h3><p>对于应用与框架的耦合，解耦重点是 封装统一的扩展SDK，避免应用调用系统的非公开接口，导致与系统大版本产生耦合。 你可以对照后面的示意图来加深理解。</p><p>![下载 (3)](.&#x2F;Android系统的耦合与解耦&#x2F;下载 (3).png)</p><p>对照图片可以看出，我们的策略是通过扩展的SDK封装原先对系统的非公开接口和扩展的API，并且做好大版本的兼容性处理，应用会统一使用扩展的SDK来增强系统的能力。这样对于应用来说，就不用做大量的版本判断代码，同时也能有统一的入口来管理版本的API。</p><p>需要注意的是，扩展SDK有些方法仍然没有办法做到百分之百的兼容。比方说在T版本上有A接口，但是在S版本上没有等价的实现，那么我们同样需要在应用侧进行兼容性判断处理。但是使用统一的扩展SDK还是有好处的，这么做能帮助应用简化90%以上的兼容性维护工作，并且能统一规范。</p><h3><span id="框架与框架解耦"><strong>框架与框架解耦</strong></span></h3><p>最后我们来看框架间的耦合，这也是最重要的和我们的工作息息相关， 框架与框架的解耦重点是减少对原生代码的修改，只保留稳定的插桩接口，将具体的实现独立成单独的组件。</p><p>![下载 (4)](.&#x2F;Android系统的耦合与解耦&#x2F;下载 (4).png)</p><p>首先我们需要定义桩点接口，为了减少编译时的耦合，可以采用反射的机制去查找接口的实现。</p><p>我来举个例子，AOSP中有一个类为AMS，其中有一个方法为onCreate()，原先在这个方法里面插入了代码，此时我们可以定义一个IAMS的接口，抽象一个onCreate()的桩点接口，然后将实现代码移动至IAMS的实现类中。</p><p>伪代码如下：</p><pre><code class="hljs Java"><span class="hljs-comment">//解耦前：</span><span class="hljs-keyword">class</span> <span class="hljs-title class_">AMS</span>&#123;  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> onCreate（）&#123;    <span class="hljs-comment">//原生代码... ...</span>    <span class="hljs-comment">// MIUI ADD:</span>    xxx    yyy    zzz    <span class="hljs-comment">// END</span>    <span class="hljs-comment">//原生代码... ...</span>  &#125;&#125;<span class="hljs-comment">//解耦后：</span><span class="hljs-keyword">interface</span> <span class="hljs-title class_">IAMS</span>&#123;  onCreate（）；&#125;<span class="hljs-comment">//AOSP代码</span><span class="hljs-keyword">class</span> <span class="hljs-title class_">AMS</span>&#123;  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> onCreate（）&#123;    <span class="hljs-comment">//原生代码... ...</span>    <span class="hljs-comment">// MIUI ADD:</span>    IAMS.instance().onCreate();    <span class="hljs-comment">// END</span>    <span class="hljs-comment">//原生代码... ...</span>  &#125;&#125;<span class="hljs-comment">//扩展组件</span><span class="hljs-keyword">class</span> <span class="hljs-title class_">AMSImpl</span>&#123;  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> onCreate（）&#123;   <span class="hljs-comment">// MIUI ADD:</span>    xxx    yyy    zzz    <span class="hljs-comment">// END</span>  &#125;&#125;</code></pre><p>我们在解耦框架的时候，同样也需要注意兼容性的问题。当桩点接口找不到具体的实现时，需要注意不能破坏原有框架的逻辑执行。另外，我们应该保证桩点接口的稳定性，并且控制其数量，<strong>避免出现大量重复</strong>以及缺少抽象设计的桩点，不然就违背了前面提到的 <strong>最少侵入修改</strong> 原则。</p><h2><span id="组件化收益"><strong>组件化收益</strong></span></h2><p>我们提到了代码耦合带来的诸多隐患,下面我们来分析一下，组件化解耦对我们解决这些耦合问题有哪些帮助。</p><h3><span id="1减少大量代码合并工作"><strong>1.减少大量代码合并工作</strong></span></h3><p>当大量的组件被抽离成独立的组件化后，对于AOSP源码的修改其实只保留了最小的桩点接口，这样当有代码合并时，就能有效减少合并的工作量。</p><p>另外，由于抽离出来的系统组件也能以独立的二进制交付，后续对项目相当于就是AOSP源码+桩点接口+扩展组件集成（应用组件、系统组件等）。如果我们能保证好组件的质量，就能避免各个项目都拉取独立的分支问题，减少分支的数量。</p><h3><span id="2减少并行的版本维护工作"><strong>2.减少并行的版本维护工作</strong></span></h3><p>组件化的设计要求各个组件必须同时做好兼容性处理，当组件能够满足这个要求时，就能做到一个版本兼容多个系统版本，那么就可以减少版本的维护工作。例如，当修改一个bug时无须在多个分支上同步、当增加一些特性时也无须在多个分支上同步等，团队能够更聚焦在组件自身的功能开发和质量提升上。</p><h3><span id="3减少质量隐患缩短问题定位时间"><strong>3.减少质量隐患，缩短问题定位时间</strong></span></h3><p>组件化最明显的好处就是能够将关联的逻辑内聚到一个组件中，同时组件之间能够有更清晰的边界及职责。这样，我们修改扩展多组件的代码时，产生的影响范围通常就会控制在当前组件中，这不容易产生连带的问题。</p><p>另外，由于组件的边界更加清晰，发现问题时也更加方便我们去定位排查，有效缩短定位问题的时间。</p><h3><span id="4提高产品的响应力"><strong>4.提高产品的响应力</strong></span></h3><p>由于组件间已完成解耦，应用组件就能够独立实现升级和发布，不与系统版本耦合。出现问题的时候，能够快速发布，不必跟随整机系统一同发布。对于框架组件也一样，Google官方提供了Apex格式也支持独立的更新，这样系统内组件有Bug时，同样也能够独立地发布更新。这将大大提高各个组件的响应力，无须跟随整机一起进行OTA的升级。</p><h2><span id="总结"><strong>总结</strong></span></h2><p>![下载 (5)](.&#x2F;Android系统的耦合与解耦&#x2F;下载 (5).png)</p>]]></content>
      
      
      
        <tags>
            
            <tag> android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git help</title>
      <link href="/2024/10/12/git-help/"/>
      <url>/2024/10/12/git-help/</url>
      
        <content type="html"><![CDATA[<!-- toc --><ul><li><a href="#git%E5%9F%BA%E7%A1%80">Git基础</a><ul><li><a href="#1git%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B">1.Git工作流程</a><ul><li><a href="#%E5%B7%A5%E4%BD%9C%E5%8C%BA">工作区</a></li><li><a href="#%E6%9A%82%E5%AD%98%E5%8C%BA">暂存区</a></li><li><a href="#%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93">本地仓库</a></li><li><a href="#%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93">远程仓库</a></li><li><a href="#%E5%B0%8F%E7%BB%93">小结</a></li></ul></li><li><a href="#2git%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE">2.Git环境配置</a><ul><li><a href="#github">github</a></li><li><a href="#gerrit">gerrit</a></li></ul></li><li><a href="#3%E5%B8%B8%E7%94%A8git%E5%91%BD%E4%BB%A4">3.常用Git命令</a><ul><li><a href="#head">HEAD</a></li><li><a href="#branch">branch</a></li><li><a href="#add">add</a></li><li><a href="#commit">commit</a></li><li><a href="#push">push</a></li><li><a href="#%E5%AE%9E%E8%B7%B5%E6%93%8D%E4%BD%9C%E6%8F%90%E4%BA%A4%E4%B8%80%E6%AC%A1%E4%BB%A3%E7%A0%81">实践操作：提交一次代码</a></li><li><a href="#merge">merge</a></li><li><a href="#rebase">rebase</a></li><li><a href="#rebase%E5%92%8Cmerge%E7%9A%84%E5%8C%BA%E5%88%AB">rebase和merge的区别</a></li><li><a href="#reset">reset</a></li><li><a href="#revert">revert</a></li><li><a href="#reset%E5%92%8Crevert%E7%9A%84%E5%8C%BA%E5%88%AB">reset和revert的区别</a></li><li><a href="#%E5%85%B6%E4%BB%96%E5%91%BD%E4%BB%A4">其他命令</a></li></ul></li><li><a href="#4repo">4.repo</a><ul><li><a href="#%E5%AE%89%E8%A3%85repo">安装repo</a></li><li><a href="#%E4%BB%93%E5%BA%93%E7%9B%AE%E5%BD%95%E5%92%8C%E5%B7%A5%E4%BD%9C%E7%9B%AE%E5%BD%95">仓库目录和工作目录</a></li><li><a href="#%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4">常用命令</a><ul><li><a href="#repo-init">repo init</a></li><li><a href="#repo-sync">repo sync</a></li><li><a href="#repo-upload">repo upload</a></li><li><a href="#repo-status">repo status</a></li><li><a href="#repo-start-dev">repo start dev</a></li></ul></li></ul></li><li><a href="#5gerrit">5.Gerrit</a><ul><li><a href="#%E4%B8%8A%E4%BC%A0%E4%BB%A3%E7%A0%81">上传代码</a><ul><li><a href="#change-number">Change Number</a></li><li><a href="#change-id">Change-Id</a></li><li><a href="#signed-off-by">Signed-Off-By</a></li><li><a href="#%E4%B8%8A%E4%BC%A0change">上传change</a></li><li><a href="#%E4%BD%BF%E7%94%A8git-push">使用git push</a><ul><li><a href="#%E5%9F%BA%E6%9C%AC%E6%A0%BC%E5%BC%8F">基本格式</a></li><li><a href="#%E5%BF%AB%E6%8D%B7%E6%96%B9%E5%BC%8F">快捷方式:</a></li></ul></li><li><a href="#%E4%BD%BF%E7%94%A8repo-upload">使用repo upload</a></li></ul></li><li><a href="#%E4%B8%8B%E8%BD%BD%E4%BB%A3%E7%A0%81">下载代码</a></li></ul></li><li><a href="#6git%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98">6.Git常见问题</a><ul><li><a href="#%E5%86%B2%E7%AA%81%E9%97%AE%E9%A2%98">冲突问题</a><ul><li><a href="#%E6%89%8B%E5%8A%A8%E8%A7%A3%E5%86%B3%E5%86%B2%E7%AA%81">手动解决冲突</a></li><li><a href="#remote-unpack-failed-error-missing-tree-xxx">remote unpack failed: error Missing tree xxx</a></li></ul></li></ul></li></ul></li></ul><!-- tocstop --><h1><span id="git基础">Git基础</span></h1><blockquote><p>本文档集合了各种软件管理工具包括repo、git、github、gerrit的基础知识和使用指南，帮助刚入职的软件工程师快速上手这些工具的使用。</p></blockquote><h2><span id="1git工作流程">1.Git工作流程</span></h2><p><img src="/2024/10/12/git-help/%E6%B5%81%E7%A8%8B%E5%9B%BE.jpg" alt="流程图"></p><p>注：</p><p>Workspace：工作区</p><p>Index &#x2F; Stage ：暂存区</p><p>Repository：仓库区</p><p>Remote：远程仓库</p><h3><span id="工作区">工作区</span></h3><p>程序员进行开发改动的地方，是你当前看到的，也是最新的。平常我们开发就是拷贝远程仓库中的一个分支，基于该分支进行开发。在开发过程中就是对工作区的操作。</p><h3><span id="暂存区">暂存区</span></h3><p>.git目录下的index文件, 暂存区会记录添加文件的相关信息(文件名、大小、timestamp…)，不保存文件实体, 通过id指向每个文件实体。可以使用<code>git status</code>查看暂存区的状态。暂存区标记了你当前工作区中，哪些内容是被git管理的。当你完成某个需求或功能后需要提交到远程仓库，那么第一步就是通过<code>git add</code>先提交到暂存区，被git管理。</p><h3><span id="本地仓库">本地仓库</span></h3><p>保存了对象被提交过的各个版本，比起工作区和暂存区的内容，它要更旧一些。<code>git commit</code>后同步index的目录树到本地仓库，方便从下一步通过<code>git push</code>同步本地仓库与远程仓库的同步。</p><h3><span id="远程仓库">远程仓库</span></h3><p>远程仓库的内容可能被分布在多个地点的处于协作关系的本地仓库修改，因此它可能与本地仓库同步，也可能不同步，但是它的内容是最旧的。</p><h3><span id="小结">小结</span></h3><ul><li><p>任何对象都是在工作区中诞生和被修改；</p></li><li><p>任何修改都是从进入index区才开始被版本控制；</p></li><li><p>只有把修改提交到本地仓库，该修改才能在仓库中留下痕迹；</p></li><li><p>与协作者分享本地的修改，可以把它们push到远程仓库来共享。</p><p>下图直观的阐述了四个区域之间的关系。</p></li></ul><p><img src="/2024/10/12/git-help/%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B.jpg" alt="工作流程"></p><h2><span id="2git环境配置">2.Git环境配置</span></h2><h3><span id="github">github</span></h3><p>首先需要有一个<a href="https://github.com/">github</a>账户，如果没有需要先注册。</p><p>注册后回到git bash中输入如下命令</p><pre><code class="hljs bash">git config --global user.name <span class="hljs-string">&quot;yourname&quot;</span>git config --global user.email <span class="hljs-string">&quot;youremail&quot;</span></code></pre><p>yourname是你注册时的用户名；</p><p>youremail是你注册时的电子邮箱；</p><p>可以执行以下两条命令，检查是否输入正确</p><pre><code class="hljs bash">git config user.namegit config user.email</code></pre><p>然后创建SSH</p><pre><code class="hljs bash">ssh-keygen -t rsa -C <span class="hljs-string">&quot;youremail&quot;</span> <span class="hljs-comment">#youremail是你注册时的电子邮箱；</span></code></pre><p>这个时候已经生成了.ssh的文件夹，在你的电脑中找到这个文件夹。</p><pre><code class="hljs bash">~$ <span class="hljs-built_in">cd</span> ~/.ssh~/.ssh $ <span class="hljs-built_in">ls</span>~/.ssh$ <span class="hljs-built_in">cat</span> id_rsa.pub</code></pre><p>或直接在文件夹中找到id_rsa.pub打开复制其中的内容。</p><p>ssh是一个秘钥，其中，<code>id_rsa</code>是你这台电脑的私人秘钥，不能给别人看。<code>id_rsa.pub</code>是公共秘钥。把这个公钥放在GitHub上，这样当你链接GitHub自己的账户时，它就会根据公钥匹配你的私钥，当能够相互匹配时，才能够顺利的通过git上传你的文件到GitHub上。</p><p>在github.com界面点击右上角的个人头像会弹出菜单，</p><p><img src="/2024/10/12/git-help/image-20241014200929001.png" alt="image-20241014200929001"></p><p>点击setting，找到SSH keys的设置选项，点击<code>New SSH key</code>把你的<code>id_rsa.pub</code>里面的信息复制进去。</p><p><img src="/2024/10/12/git-help/image-20241014195518574.png" alt="image-20241014195518574"></p><p>密钥标题什么都可以，完成后点击 <code>Add SSH key</code>。</p><p>执行如下命令查看是否成功：</p><pre><code class="hljs bash">ssh -T git@github.com <span class="hljs-comment">#关联验证</span></code></pre><p>出现如下信息时说明配置成功！</p><pre><code class="hljs bash">Hi yourname! You<span class="hljs-string">&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span></code></pre><h3><span id="gerrit">gerrit</span></h3><p>在本地生成公私钥对. 然后将公钥传到Gerrit的服务器上</p><p>1.在本地命令中执行</p><pre><code class="hljs bash">ssh-keygen -t rsa -b 4096</code></pre><p><code>~/.ssh/</code>目录下多了几个文件</p><p>其中<code>~/.ssh/id_rsa</code>就是私钥，<code>~/.ssh/id_rsa.pub</code>就是公钥内容</p><p>2.在命令行执行</p><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> ~/.ssh/id_rsa.pub</code></pre><p>将其内容复制. 粘贴到Gerrit的配置界面</p><p><img src="/2024/10/12/git-help/image-20241015111720466.png" alt="image-20241015111720466"></p><p><img src="/2024/10/12/git-help/image-20241014200311500.png" alt="image-20241014200311500"></p><p><strong>配置本地信息</strong></p><p>配置你的名字与邮箱, 此处xxxxx是你的邮箱前缀</p><pre><code class="hljs bash">git config --global user.email xxxxx@xiaomi.com</code></pre><pre><code class="hljs bash">git config --global user.name xxxxx</code></pre><h2><span id="3常用git命令">3.常用Git命令</span></h2><pre><code class="hljs bash"><span class="hljs-comment">#创建版本库</span>git <span class="hljs-built_in">clone</span> &lt;url&gt;       <span class="hljs-comment">#克隆远程版本库</span>git init              <span class="hljs-comment">#初始化本地版本库</span><span class="hljs-comment">#修改和提交</span>git status             <span class="hljs-comment">#查看状态</span>git diff               <span class="hljs-comment">#查看变更内容</span>git add .              <span class="hljs-comment">#跟踪所有改动过的文件</span>git add &lt;file&gt;         <span class="hljs-comment">#跟踪指定文件</span>git <span class="hljs-built_in">mv</span> &lt;old&gt; &lt;new&gt;     <span class="hljs-comment">#文件改名</span>git <span class="hljs-built_in">rm</span> &lt;file&gt;          <span class="hljs-comment">#删除文件</span>git <span class="hljs-built_in">rm</span> --cached &lt;file&gt; <span class="hljs-comment">#停止跟踪文件但不删除</span>git commit -m <span class="hljs-string">&quot;commit message&quot;</span>                       <span class="hljs-comment">#提交所有更新过的文件</span>git commit --amend     <span class="hljs-comment">#修改最后一次提交</span>git commit -sa         <span class="hljs-comment">#发起提交并追加签名</span><span class="hljs-comment">#查看提交历史</span>git <span class="hljs-built_in">log</span>                <span class="hljs-comment">#查看提交历史</span>git <span class="hljs-built_in">log</span> -p &lt;file&gt;      <span class="hljs-comment">#查看指定文件的提交历史</span>git blame &lt;file&gt;       <span class="hljs-comment">#以列表方式查看指定文件的提交历史</span><span class="hljs-comment">#撤销</span>git reset --hard HEAD  <span class="hljs-comment">#撤销工作目录中所有未提交文件的修改内容</span>git checkout HEAD &lt;file&gt;                       <span class="hljs-comment">#撤销指定的未提交文件的修改内容</span>git revert &lt;commit&gt;    <span class="hljs-comment">#撤销指定的提交</span><span class="hljs-comment">#分支与标签</span>git branch             <span class="hljs-comment">#显示所有本地分支</span>git checkout &lt;branch/tag&gt;                       <span class="hljs-comment">#切换到指定分支或标签</span>git branch &lt;new-branch&gt;#创建新分支git branch -d &lt;branch&gt; <span class="hljs-comment">#删除本地分支</span>git branch -D &lt;branch&gt; <span class="hljs-comment">#强制删除本地分支</span>git branch -r          <span class="hljs-comment">#查看远程所有分支</span>git tag                <span class="hljs-comment">#列出所有本地标签</span>git tag &lt;tagname&gt;      <span class="hljs-comment">#基于最新提交创建标签</span>git tag -d &lt;tagname&gt;   <span class="hljs-comment">#删除标签</span><span class="hljs-comment">#合并与衍合</span>git merge &lt;branch&gt;     <span class="hljs-comment">#合并指定分支到当前分支</span>git rebase &lt;branch&gt;    <span class="hljs-comment">#衍合指定分支到当前分支</span><span class="hljs-comment">#远程操作</span>git remote -v          <span class="hljs-comment">#查看远程版本库信息</span>git remote show &lt;remote&gt;                       <span class="hljs-comment">#查看指定远程版本库信息</span>git remote add &lt;remote&gt; &lt;url&gt;                       <span class="hljs-comment">#添加远程版本库</span>git fetch &lt;remote&gt;     <span class="hljs-comment">#从远程库获取代码</span>git pull &lt;remote&gt; &lt;branch&gt;                       <span class="hljs-comment">#下载代码及快速合并</span>git push &lt;remote&gt; &lt;branch&gt;git push &lt;remote&gt; :&lt;branch/tag-name&gt;                       <span class="hljs-comment">#删除远程分支或标签</span>git push --tags        <span class="hljs-comment">#上传所有标签</span></code></pre><h3><span id="head">HEAD</span></h3><p>HEAD，它始终指向当前所处分支的最新的提交点。你所处的分支变化了，或者产生了新的提交点，HEAD就会跟着改变。</p><p><img src="/2024/10/12/git-help/HEAD.jpg" alt="HEAD"></p><h3><span id="branch">branch</span></h3><p>涉及到协作，自然会涉及到分支，关于分支，大概有展示分支，切换分支，创建分支，删除分支这四种操作。</p><p><strong>创建分支</strong></p><pre><code class="hljs bash">git branch &lt;branch-name&gt;                    <span class="hljs-comment">#新建一个分支，但依然停留在当前分支</span>git branch --track &lt;branch&gt;&lt;remote-branch&gt;  <span class="hljs-comment">#新建一个分支，与指定的远程分支建立追踪关系</span></code></pre><p><strong>展示分支</strong></p><pre><code class="hljs bash">git branch                                  <span class="hljs-comment">#列出所有本地分支</span>git branch -r                               <span class="hljs-comment">#列出所有远程分支</span>git branch -a                               <span class="hljs-comment">#列出所有本地分支和远程分支</span></code></pre><p><strong>切换分支</strong></p><pre><code class="hljs bash">git checkout -b &lt;branch-name&gt;               <span class="hljs-comment">#新建一个分支，并切换到该分支</span>git checkout &lt;branch-name&gt;                  <span class="hljs-comment">#切换到指定分支，并更新工作区</span></code></pre><p><strong>删除分支</strong></p><pre><code class="hljs bash">git branch -d &lt;branch-name&gt;                 <span class="hljs-comment">#删除分支</span>git push origin --delete &lt;branch-name&gt;      <span class="hljs-comment">#删除远程分支</span></code></pre><h3><span id="add">add</span></h3><p><img src="/2024/10/12/git-help/123456.jpg" alt="123456"></p><p>add相关命令是实现将工作区修改的内容提交到暂存区，交由git管理。</p><pre><code class="hljs bash">git add .          <span class="hljs-comment">#添加当前目录的所有文件到暂存区</span>git add &lt;<span class="hljs-built_in">dir</span>&gt;      <span class="hljs-comment">#添加指定目录到暂存区</span>git add &lt;file&gt;     <span class="hljs-comment">#添加指定文件到暂存区</span></code></pre><h3><span id="commit">commit</span></h3><p><img src="/2024/10/12/git-help/123456.jpg" alt="123456"></p><p>commit实现将暂存区的内容提交到本地仓库，并使当前分支的HEAD向后移动一个提交点</p><pre><code class="hljs bash">git commit -m &lt;message&gt; <span class="hljs-comment">#提交暂存区到本地仓库，message代表说明信息</span>git commit &lt;file&gt; -m &lt;message&gt; <span class="hljs-comment">#提交暂存区的指定文件到本地仓库</span>git commit --amend &lt;message&gt; <span class="hljs-comment">#使用一次新的commit，替代上一次提交</span></code></pre><h3><span id="push">push</span></h3><p><img src="/2024/10/12/git-help/push..jpg" alt="push."></p><p>上传本地仓库分支到远程仓库分支，实现同步。</p><pre><code class="hljs bash">git push &lt;remote&gt;&lt;branch&gt; <span class="hljs-comment">#上传本地指定分支到远程仓库</span>git push &lt;remote&gt; --force <span class="hljs-comment">#强行推送当前分支到远程仓库</span>git push &lt;remote&gt; --all   <span class="hljs-comment">#推送所有分支到远程仓库</span></code></pre><h3><span id="实践操作提交一次代码">实践操作：提交一次代码</span></h3><p>首先下载代码到本地</p><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> &lt;url&gt;  <span class="hljs-comment">#url为远程仓库的代码链接</span></code></pre><p>在本地<strong>工作区</strong>对代码进行修改</p><p>执行</p><pre><code class="hljs bash">git status#查看状态</code></pre><p>可以发现我们当前没有在任何一个开发分支上，因此需要创建一个开发分支</p><pre><code class="hljs bash">git branch <span class="hljs-built_in">local</span> <span class="hljs-comment">#创建了一个名为local的本地分支</span></code></pre><p>再次执行<code>git status</code>会显示我们当前位于local分支，并且修改了哪些文件</p><p>执行命令</p><pre><code class="hljs bash">git branch</code></pre><p>会列出所有的本地分支，包括我们刚才创建的local也在其中</p><p>将修改的全部代码提交到暂存区，执行</p><pre><code class="hljs bash">git add .</code></pre><p>将暂存区内容提交到本地仓库，执行</p><pre><code class="hljs bash">git commit -m <span class="hljs-string">&quot;第一次提交&quot;</span></code></pre><p>字符串内容可自行更改，此时再执行<code>git status</code>会发现工作区没有更改内容了，干净的工作区。</p><p>在提交后想查看修改的详细内容可以使用命令</p><pre><code class="hljs bash">git diff</code></pre><p>最后将我们的本地仓库提交到远程仓库同步我们修改的代码，执行</p><pre><code class="hljs bash">git push origin <span class="hljs-built_in">local</span></code></pre><p>到此完成了一次完整的提交过程。</p><p>当我们发现上一次的提交有问题需要覆盖其内容，只需在修改代码后依次执行：</p><pre><code class="hljs bash">git add .git commit --amend <span class="hljs-comment">#覆盖上一次提交</span></code></pre><p>这样会避免我们同一修改产生过多提交节点。</p><h3><span id="merge">merge</span></h3><p>merge命令把不同的分支合并起来</p><p><img src="/2024/10/12/git-help/23456.jpg" alt="23456"></p><p>如上图，在实际开发过程中，我们可能从master分支中切出一个分支，然后进行开发完成需求，中间经过R3，R4，R5的commit记录，最后开发完成需要合入到master中，这便用到了merge。</p><pre><code class="hljs bash">git fetch &lt;remote&gt; <span class="hljs-comment">#merge之前先拉一下远程仓库最新代码</span>git merge &lt;branch&gt; <span class="hljs-comment">#合并指定分支到当前分支</span></code></pre><p>一般在merge之后，会出现conflict，需要针对冲突情况，手动解除冲突。主要是因为两个用户修改了同一文件的同一块区域。</p><h3><span id="rebase">rebase</span></h3><p>rebase又称为衍合，是合并的另外一种选择。</p><p>如下图：</p><p><img src="/2024/10/12/git-help/rebaseShow.jpg" alt="rebaseShow"></p><p>在开始阶段我们处于new分支上，执行命令：</p><pre><code class="hljs bash">git rebase <span class="hljs-built_in">local</span></code></pre><p>在new分支上的新commit都在master分支上重新上演一遍，最后checkout切换回到new分支。合并前后所处的分支并没有改变这一点和merge是一样的。<code>通俗解释就是new分支想在dev的肩膀上继续下去</code>rebase也需要手动解决冲突。</p><h3><span id="rebase和merge的区别">rebase和merge的区别</span></h3><p>现在我们有这样的两个分支,test和master，提交如下：      </p><p><img src="/2024/10/12/git-help/origin.jpg" alt="origin"></p><p>在master执行<code>git merge test</code>,然后会得到如下结果：   </p><p><img src="/2024/10/12/git-help/merge.jpg" alt="merge"></p><p>在master执行<code>git rebase test</code>，然后得到如下结果：</p><p><img src="/2024/10/12/git-help/rebase.jpg" alt="rebase"></p><p>可以看到，merge操作会生成一个新的节点，之前的提交分开显示。而rebase操作不会生成新的节点，是将两个分支融合成一个线性的提交。如果你想要一个干净的，没有merge commit的线性历史树，那么你应该选择git rebase如果你想保留完整的历史记录，并且想要避免重写commit history的风险，你应该选择使用git merge</p><h3><span id="reset">reset</span></h3><p>reset命令把当前分支指向另一个位置，并且相应的变动工作区和暂存区。</p><pre><code class="hljs bash">git reset --soft &lt;commit&gt;  <span class="hljs-comment">#只改变提交点，暂存区和工作目录的内容都不变</span>git reset --mixed &lt;commit&gt; <span class="hljs-comment">#改变提交点，同时改变暂存区的内容</span>git reset --hard &lt;commit&gt;  <span class="hljs-comment">#暂存区、工作区的内容都会被修改到与提交点完全一致的状态</span>git reset --hard HEAD      <span class="hljs-comment">#让工作区回到上次提交时的状态</span></code></pre><h3><span id="revert">revert</span></h3><p>git revert用一个新提交来消除一个历史提交所做的任何修改。</p><pre><code class="hljs bash">git commit -am <span class="hljs-string">&quot;update readme&quot;</span>git revert 15df9b6</code></pre><p><img src="/2024/10/12/git-help/revert.jpg" alt="revert"></p><h3><span id="reset和revert的区别">reset和revert的区别</span></h3><ul><li>git revert是用一次新的commit来回滚之前的commit，git reset是直接删除指定的commit。</li><li>在回滚这一操作上看，效果差不多。但是在日后继续merge以前的老版本时有区别。因为git revert是用一次逆向的commit“中和”之前的提交，因此日后合并老的branch时，导致这部分改变不会再次出现，减少冲突。但是git reset是之前把某些commit在某个branch上删除，因而和老的branch再次merge时，这些被回滚的commit应该还会被引入，产生很多冲突。</li><li>git reset 是把HEAD向后移动了一下，而git revert是HEAD继续前进，只是新的commit的内容和要revert的内容正好相反，能够抵消要被revert的内容。</li></ul><h3><span id="其他命令">其他命令</span></h3><pre><code class="hljs bash">git status               <span class="hljs-comment">#显示有变更的文件</span>git <span class="hljs-built_in">log</span>                  <span class="hljs-comment">#显示当前分支的版本历史</span>git diff                 <span class="hljs-comment">#显示暂存区和工作区的差异</span>git diff HEAD            <span class="hljs-comment">#显示工作区与当前分支最新commit之间的差异</span>git cherry-pick &lt;commit&gt; <span class="hljs-comment">#选择一个commit，合并当前分支</span></code></pre><h2><span id="4repo">4.repo</span></h2><p>repo是Android为了方便管理多个git库而开发的Python脚本。repo的出现，并非为了取代git，而是为了让Android开发者更为有效的利用git。</p><h3><span id="安装repo">安装repo</span></h3><p>Android源码包含数百个git库，仅仅是下载这么多git库就是一项繁重的任务，所以在下载源码时，Android就引入了repo。 Android官方推荐下载repo的方法是通过<strong>Linux curl</strong>命令，下载完后，为repo脚本添加可执行权限。</p><p>安装repo(ubuntu):</p><pre><code class="hljs bash"><span class="hljs-comment">#准备环境变量</span><span class="hljs-built_in">mkdir</span> ~/binPATH=~/bin:<span class="hljs-variable">$PATH</span><span class="hljs-comment">#将repo下载到你的环境变量目录下（例如~\bin）</span>curl https://storage.googleapis.com/git-repo-downloads/repo &gt; ~/bin/repo<span class="hljs-comment">#修改执行权限</span><span class="hljs-built_in">chmod</span> a+x ~/bin/repo<span class="hljs-comment">#建立工作目录</span><span class="hljs-built_in">mkdir</span> miui<span class="hljs-built_in">cd</span> miui<span class="hljs-comment">#设置邮箱和用户名</span>git config --global user.email username@xiaomi.comgit config --global user.name username</code></pre><p>repo对git命令进行了封装，提供了一套repo的命令集(包括init, sync等)，所有repo管理的自动化实现也都包含在这个git库中。 在第一次初始化的时候，repo会从远程把这个git库下载到本地。</p><h3><span id="仓库目录和工作目录">仓库目录和工作目录</span></h3><p>仓库目录保存的是历史信息和修改记录，工作目录保存的是当前版本的信息。一般来说，一个项目的Git仓库目录（默认为.git目录）是位于工作目录下面的，但是Git支持将一个项目的Git仓库目录和工作目录分开来存放。 对于repo管理而言，既有分开存放，也有位于工作目录存放的:</p><ul><li><strong>manifests</strong>： 仓库目录有两份拷贝，一份位于工作目录(.repo&#x2F;manifests)的.git目录下，另一份独立存放于.repo&#x2F;manifests.git</li><li><strong>repo</strong>：仓库目录位于工作目录(.repo&#x2F;repo)的.git目录下</li><li><strong>project</strong>：所有被管理git库的仓库目录都是分开存放的，位于.repo&#x2F;projects目录下。同时，也会保留工作目录的.git，但里面所有的文件都是到.repo的链接。这样，即做到了分开存放，也兼容了在工作目录下的所有git命令。</li></ul><p>既然.repo目录下保存了项目的所有信息，所有要拷贝一个项目时，只是需要拷贝这个目录就可以了。repo支持从本地已有的.repo中恢复原有的项目。</p><h3><span id="常用命令">常用命令</span></h3><h4><span id="repo-init">repo init</span></h4><pre><code class="hljs bash">repo init -u url [options]</code></pre><p>初始化要下载的代码</p><p>在当前目录中安装 Repo。这样会创建一个 <code>.repo/</code> 目录，其中包含存放 Repo 源代码和标准 Android 清单文件的 Git 代码库。</p><p><code>-u</code>：指定从中检索清单代码库的网址。</p><p><code>-m</code>：选择代码库中的清单文件。如果未选择清单名称，则默认为 <code>default.xml</code>。</p><p><code>-b</code>：指定修订版本，即特定的 manifest-branch。</p><p><code>-g all</code>：如果加上-g all 参数，则会下载小米的modem源码，默认不下载modem源码</p><p>例如：</p><pre><code class="hljs bash">repo init -u ssh://&#123;yourname&#125;@git.mioffice.cn:29418/platform/manifest.git -b dev -m bsp-grus-q.xml --repo-url=ssh://&#123;yourname&#125;@git.mioffice.cn:29418/tools/repo.git --no-repo-verify <span class="hljs-comment"># 如果需要下载BP代码，在init的时候添加 -g all 参数，如下: $ repo init -g all -u ssh://&#123;yourname&#125;@git.mioffice.cn:29418/platform/manifest.git -b dev -m bsp-grus-q.xml --repo-url=ssh://&#123;yourname&#125;@git.mioffice.cn:29418/tools/repo.git --no-repo-verify </span></code></pre><h4><span id="repo-sync">repo sync</span></h4><pre><code class="hljs bash">repo <span class="hljs-built_in">sync</span> [project-list]</code></pre><p>下载新的更改并更新本地环境中的工作文件，基本上可以在所有 Git 代码库中完成 <code>git fetch</code>。如果在未使用任何参数的情况下运行 <code>repo sync</code>，则该命令会同步所有项目的文件。</p><p>运行 <code>repo sync</code> 后，将出现以下情况：</p><ul><li>如果目标项目从未同步过，则 <code>repo sync</code> 相当于 <code>git clone</code>。远程代码库中的所有分支都会复制到本地项目目录中。</li><li>如果目标项目以前同步过，则 <code>repo sync</code> 相当于：</li></ul><pre><code class="hljs bash">$ git remote update$ git rebase origin/branch</code></pre><p> 其中 <code>branch</code> 是本地项目目录中当前已检出的分支。如果本地分支没有在跟踪远程代码库中的分支，则项目不会发生任何同步。</p><ul><li>如果 Git rebase 操作导致合并冲突，请使用常规 Git 命令（例如 <code>git rebase --continue</code>）来解决冲突。</li></ul><p>成功运行 <code>repo sync</code> 后，指定项目中的代码即处于最新状态，并已与远程代码库中的代码同步。</p><p><code>-c</code>：仅获取服务器中的当前清单分支。</p><p><code>-d</code>：将指定项目切换回清单修订版本。如果项目当前属于某个主题分支，但临时需要清单修订版本，则此选项会有所帮助。</p><p><code>-f</code>：即使某个项目同步失败，也继续同步其他项目。</p><p><code>-jthreadcount</code>：将同步操作拆分成多个线程，以更快地完成。切勿为其他任务预留 CPU，这会使计算机超负荷运行。如需查看可用 CPU 的数量，请先运行：<code>nproc --all</code></p><p><code>-q</code>：通过抑制状态消息来确保运行过程没有干扰。</p><p><code>-s</code>：同步到当前清单中的 manifest-server 元素指定的一个已知良好 build。</p><h4><span id="repo-upload">repo upload</span></h4><pre><code class="hljs bash">repo upload [project-list]</code></pre><p>对于指定的项目，Repo 会将本地分支与最后一次 repo sync 时更新的远程分支进行比较。Repo 会提示您选择一个或多个尚未上传以供审核的分支。</p><p>当 Gerrit 通过其服务器接收对象数据时，它会将每项提交转变成一项更改，以便审核者可以针对特定提交给出意见。如需将几项“检查点”提交合并为一项提交，请运行 <code>git rebase -i</code> 然后再运行 upload。</p><p>如果在未使用任何参数的情况下运行 <code>repo upload</code>，则该命令会在所有项目中搜索要上传的更改。</p><p>如果您只想上传当前已检出的 Git 分支，请使用标记 <code>--current-branch</code>（或简称 <code>--cbr</code>）。</p><p><strong>向Gerrit提交</strong></p><p><strong>比git push 更优在以下方面 ：</strong></p><ol><li>肯定不会提交错仓库</li><li>manifest对的情况下，不会提交错分支</li><li>避免拼写错误</li><li>因gerrit现阶段配置的复杂，适合不太理解的小白用户</li></ol><p><code>repo upload .</code>：点不能省略，请配合<code>repo start .</code> 使用，当前仓库提交change到gerrit上</p><p><code>repo upload --cbr .</code>：当前仓库有多个分支时，仅提交当前指向的分支的change到gerrit上，其他分支忽略</p><p><code>repo upload -d .</code>：提交一个draft到gerrit上，draft的概念请参考 <a href="https://wiki.n.miui.com/pages/viewpage.action?pageId=21226458">新版Gerrit使用说明</a> 中的 <a href="https://wiki.n.miui.com/pages/viewpage.action?pageId=21226458#id-%E6%96%B0%E7%89%88Gerrit%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E-%E6%8F%90%E4%BA%A4%E4%B8%80%E4%B8%AA%E8%8D%89%E7%A8%BFdraft">提交一个草稿draft</a> 部分</p><p><code>repo upload -t .</code>：提交change的同时，会将你的本地branch name作为该change的topic</p><p><strong>补充一种情况，使用git命令创建分支使用repo upload</strong></p><p> 创建分支时使用git checkout -b 新分支名 远程分支名 例如：</p><pre><code class="hljs bash">work@c4-miui-miuigit-server01:~$ git branch -a* (no branch)remotes/m/alpha -&gt; miui/v10-p-begonia-cmccremotes/m/dev -&gt; miui/miui-p-tucana-cmccremotes/m/stable -&gt; miui/v10-p-begonia-mexicoremotes/miui/f2-grus-p-operatorremotes/miui/miui-p-ginkgo-claroremotes/miui/miui-p-olive-claroremotes/miui/miui-p-tucana-cmccremotes/miui/miui-p-tucana-stableremotes/miui/miui-q-cepheus-stableremotes/miui/v10-o-cactus-mexicowork@c4-miui-miuigit-bak01:~/hdd1/scm-use/teststable/frameworks/base$ git checkout -b mybranch remotes/miui/miui-p-tucana-stable<span class="hljs-comment">#这样创建的分支就可以使用repo upload</span></code></pre><p>通常上传代码使用命令</p><pre><code class="hljs bash">repo upload . --no-verify</code></pre><h4><span id="repo-status">repo status</span></h4><p>查看所有仓库的git status</p><p>适用于修改多个仓库后，统一查看当前状况</p><h4><span id="repo-start-dev">repo start dev</span></h4><p>创建一个分支名为dev</p><h2><span id="5gerrit">5.Gerrit</span></h2><h3><span id="上传代码">上传代码</span></h3><p>假设你已经下好了完整的代码,我们随便找一个小仓库来做个实验, 比如<code>platform/frameworks/ex</code>, 提交一个change</p><p>1.<code>cd frameworks/ex</code></p><p>2.随便新建一个文件, 比如<code>echo 1 &gt; 1.txt</code></p><p>3.此时运行<code>git add</code>将文件添加到索引区. 然后运行<code>git commit -s</code>生成一笔提交. 注意提交的格式必须是如下格式, 否则提交到Gerrit上去之后, 会被机器人自动<code>Code Review -2</code>, 无法合入代码</p><pre><code class="hljs sql">标题:副标题JIRA<span class="hljs-operator">-</span>ID描述Change<span class="hljs-operator">-</span>Id: xxxxxxxxxxxxxSigned<span class="hljs-operator">-</span>off<span class="hljs-operator">-</span><span class="hljs-keyword">by</span>: xxxxx <span class="hljs-operator">&lt;</span>xxxxxxx<span class="hljs-operator">&gt;</span></code></pre><h5><span id="change-number">Change Number</span></h5><p>这个数字通常是在你push完了之后, gerrit自动生成的全局唯一ID.比如<code>https://gerrit.pt.mioffice.cn/c/2341170</code>这个url里的<code>2341170</code>就是这个change的<code>change Number</code>.</p><h5><span id="change-id">Change-Id</span></h5><p><code>Change-Id</code>是Gerrit用来识别review层面的ID，<a href="https://gerrit-review.googlesource.com/Documentation/user-changeid.html">官方文档</a>里会有详细解释</p><p>本质上来说, 他是一串随机数, 如果你自己不指定, 那么<code>commit-msg hook</code>会自动帮你添加. 它通常位于这个仓库的<code>.git/hooks/commit-msg</code>里. 这就是为什么我们前一篇文章下载代码的时候, 复制命令需要复制<code>Clone with commit msg-hook</code>的内容.</p><p>和<code>change Number</code>作为服务器上的唯一ID不同, <code>Change-Id</code>是内嵌在<code>commit-message</code>里的, 他对于<code>git</code>来说只是单纯的一个字符串而已. 但是对于Gerrit来说, 他标识了同一组Review的change. 换句话说, 在同一个<code>Change Number</code>里, 不同<code>patchSet</code>的change, 一定是共享同一个<code>Change-Id</code>的. 这在你上传了一个change之后, 发现他是有问题的需要修改重新上传非常有用. 你会发现当你再次上传, 你不需要告诉Gerrit你想覆盖哪个change, 他会通过<code>Change-Id</code>自动识别</p><p>注意<code>Change-Id</code>并不一定是唯一的. 他只在同一个仓库的同一个分支下是唯一的.</p><h5><span id="signed-off-by">Signed-Off-By</span></h5><p><code>Signed-off-by</code>这一行是<code>git commit</code>的<code>-s</code>命令自动添加的. 其实就是为了追踪真正的提交者. 因为很有可能一笔change的作者并不是你, 比如你从AOSP上下载了一些代码, 并且合入到我们的Gerrit中. 这个时候<code>Signed-off-by</code>这一行就可以记录下来作者和上传者并不是同一个人</p><h5><span id="上传change">上传change</span></h5><p>Gerrit本身的文档对于上传change的高级用法有特别详尽的描述, 大家可以<a href="https://gerrit.pt.mioffice.cn/Documentation/user-upload.html">参考</a>.</p><p>我们在这里只介绍最基本的上传办法</p><h5><span id="使用git-push">使用git push</span></h5><h6><span id="基本格式">基本格式</span></h6><p><code>git push</code>的基本格式为:</p><pre><code class="hljs bash">git push ssh://用户名``@域名:端口/仓库 本地指针:refs/for/服务器指针</code></pre><p>举个例子, 要把你当前<code>platform/frameworks/base</code>的<code>HEAD</code> push到服务器的<code>master-t-qcom</code>分支上的时候, 你的命令应该是</p><pre><code class="hljs bash">git push ssh://用户名``@gerrit.pt.mioffice.cn:29418``/platform/frameworks/base`` HEAD:refs/for/master-t-qcom</code></pre><p>如果提交成功，会有 “SUCCESS” 提示，并附带change link,如下图：</p><p><img src="/2024/10/12/git-help/image-20241015111258229.png" alt="image-20241015111258229"></p><h6><span id="快捷方式">快捷方式:</span></h6><p>如果你是用<code>repo</code>下载的代码, 那我们为<code>git push</code>提供了快捷方式</p><pre><code class="hljs plaintext">git push ``origin`` HEAD:refs/for/master-t-qcom</code></pre><p>这里的<code>origin</code>实际上是我们设置在<code>remote</code>里的服务器别名, 可以用<code>git remote -v</code>查看</p><p><strong>说明</strong>：</p><ul><li>git.mioffice.cn 是用于研发下载代码的从服务器域名</li><li>gerrit.pt.mioffice.cn 是用于研发提交代码的主服务器域名</li></ul><h5><span id="使用repo-upload">使用repo upload</span></h5><p>​       使用如下命令也可以上传代码, 命令里的<code>.</code>代指当前目录</p><pre><code class="hljs bash">repo start localTmp<span class="hljs-comment">#在localTmp分支上提交东西</span>repo upload .</code></pre><p>这个命令的意思是, 在本地创建一个<code>localTmp</code>分支, 然后把<code>localTmp</code>分支上的内容推送到<code>manifest</code>里的指定分支(也就是记录在<code>.repo/manifest.xml</code>里面的分支).</p><p>假设你当前<code>manifest</code>里这个仓库的默认分支是<code>master-t-qcom</code>. 那么实际上这两个命令相当于执行了</p><pre><code class="hljs perl">git checkout -b localTmp master-t-qcom<span class="hljs-comment">#上面这句是repo start localTmp命令实际执行的</span>git <span class="hljs-keyword">push</span> ssh:<span class="hljs-regexp">//</span>chengyang<span class="hljs-variable">@gerrit</span>.pt.mioffice.cn:<span class="hljs-number">29418</span>/platform/frameworks/ex refs/heads/localTmp:refs/<span class="hljs-keyword">for</span>/master-t-qcom<span class="hljs-comment">#这一句是repo upload . 最后实际执行的</span></code></pre><p>如果你想知道当前仓库的默认分支, 其实只需要<code>repo manifest |grep &lt;仓库名&gt;</code></p><p>这里有一点大家可能会注意到, 你自己用<code>git push</code>基本本地指针都是<code>HEAD</code>, 也就是你当前checkout的点.</p><p>但是<code>repo upload .</code>永远push的是你当初<code>repo start</code>的分支, 在这个例子里是<code>refs/heads/localTmp</code>. 一定有小伙伴曾经遇到过明明已经<code>commit</code>了change, 结果<code>repo upload</code>却说<code>no branches ready for upload</code>.这就是因为你没有把change提交到你之前<code>repo start</code>的分支上</p><p>同样, 提交成功后有 “SUCCESS” 提示，并附带change link：</p><p><img src="/2024/10/12/git-help/image-20241015111531042.png" alt="image-20241015111531042"></p><h3><span id="下载代码">下载代码</span></h3><p>1.需初始化环境，参考2.Git环境配置中的gerrit章节</p><p>2.复制<a href="https://bbm.pt.miui.com/releases">bbm</a>上的<code>复制全部</code>按钮初始化下载</p><p><img src="/2024/10/12/git-help/image-20241015111832531.png" alt="image-20241015111832531"></p><p>3.使用<code>repo sync -cd --no-tags</code>命令下载代码. 理想情况下, 下载代码应该在50分钟左右完成. 如果你下载代码十分慢且痛苦. <a href="https://xiaomi.f.mioffice.cn/docs/dock4tc9d5fk4bb2dFnchlppZVg#">可以参考这篇文档</a></p><h2><span id="6git常见问题">6.Git常见问题</span></h2><h3><span id="冲突问题">冲突问题</span></h3><p>首先介绍一下代码冲突出现的原因：</p><p>情况一：开始把我们需要修改的代码拉下来，在本地修改代码的过程中，有人合入了代码，而且修改的代码与合入代码的位置十分相近，在git push 上去后，在gerrit上就会出现代码冲突的提示。而且，如果几个提交有依赖关系，只要底下的提交出现冲突，上面的提交全部都会发生代码冲突，即使它们其实并不存在冲突，这时将上面的提交每个都rebase一下就可以将冲突提示给消除掉了。</p><p>情况二：基于一个比较旧的代码版本进行修改，并进行了提交，但是有新的合入把旧的给修改了，比如删除了一行，这种情况也会发生代码冲突。</p><p>处理过程：git push——&gt;git status .——&gt;git diff，然后就可能会出现：</p><p><img src="/2024/10/12/git-help/image-20241015140854352.png" alt="image-20241015140854352"></p><p>因为基准的代码有一行删除掉了，并留下了一个空行，所以这里多处一行，那为什么下面一部分不会出现被删除的东西呢？因为之前参考的代码已经修改并合入了(我的提交只是记录修改了哪个部分，没有修改的不会记录)，所以就无法查到被删除的是什么内容，于是没有显示内容。</p><p>具体到我碰到的代码冲突，我在一个节点上做了一系列的提交，这些提交有很多是修改了同一个文件，但是合入分支总有一个先后之分，一部分合入了，后面的部分就和分支里的代码冲突了。</p><p><strong>在gerrit界面上进行修改</strong></p><p>在冲突的提交界面上点击rebase按钮，就会在界面文件里显示如上形式的代码冲突提示，直接在上面修改并保存就可以了</p><p>第二种是点击右上角的cherry pick，cherry pick到自己的分支，也会出现和上面那种方法相同的效果。</p><h4><span id="手动解决冲突">手动解决冲突</span></h4><p>打开发生冲突的文件，你会看到类似以下内容：</p><pre><code class="hljs bash">&lt;&lt;&lt;&lt;&lt;&lt;&lt; <span class="hljs-string">HEAD</span><span class="hljs-string">这是当前分支的内容</span><span class="hljs-string">=======</span><span class="hljs-string">这是合并分支的内容</span><span class="hljs-string">&gt;&gt;&gt;&gt;&gt;&gt;&gt; branch-name</span></code></pre><p>上面的示例展示了冲突标记 <code>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</code>, <code>=======</code>, <code>&gt;&gt;&gt;&gt;&gt;&gt;&gt; branch-name</code>。它们分别代表了当前分支（HEAD）、合并进来的分支和分支名称。</p><p>手动解决冲突步骤</p><ul><li>仔细阅读被标记的不同分支的内容，并决定应该保留哪些修改，或是进行其他修改以解决冲突。</li><li>删除冲突标记 <code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code>, <code>=======</code>, <code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code> 之间的内容，并确保最终文件内容正确、合理。</li><li>将需要的修改从两个分支的内容中合并到一个统一、正确的版本中，以解决冲突。</li><li>使用 <code>git add 文件名</code> 命令将已解决冲突的文件标记为已暂存状态。此操作告知 Git 已经处理了这些文件的合并冲突。如果有多个文件发生冲突，可以一次性使用 <code>git add .</code> 命令将所有解决后的文件标记为已解决状态。</li><li>执行 <code>git commit</code> 命令，Git 会为解决冲突创建一个新的合并提交。在提交信息中，建议添加描述性信息，说明这次提交解决了哪些冲突、修复了什么问题或者包含了什么功能性修改。</li><li>验证合并后的代码，确保没有新的功能问题、不引入新的错误或异常。可以进行一些测试，运行应用程序，或者请同事审查代码修改，以确保所有功能和逻辑都按预期工作。</li></ul><p><img src="/2024/10/12/git-help/image-20241015142435004.png" alt="image-20241015142435004"></p><h4><span id="remote-unpack-failed-error-missing-tree-xxx">remote unpack failed: error Missing tree xxx</span></h4><p><img src="/2024/10/12/git-help/image-20241015112148709.png" alt="image-20241015112148709"></p><p>解决方法:</p><pre><code class="hljs bash">step 1: git remote -vmiui    ssh://zhangjinhao3@git.mioffice.cn:29418/miui/frameworks/interface (fetch)miui    ssh://zhangjinhao3@gerrit.pt.mioffice.cn:29418//miui/frameworks/interface (push)step 2: git push ssh://dingyingzhi@gerrit.pt.mioffice.cn:29418//platform/vendor/qcom-proprietary/mm-camerasdk HEAD:refs/for/master-u-qcom --no-thin<span class="hljs-comment"># 注：HEAD:refs/for/要提交的远程分支</span>使用命令:git branch -r#查看m/master-v -&gt; miui/master-v master-v即为要提交的远程分支，因此命令为 git push ssh://zhangjinhao3@gerrit.pt.mioffice.cn:29418//miui/frameworks/interface HEAD:refs/for/master-v --no-thin</code></pre><p>参考文章</p><p>gerrit<a href="https://xiaomi.f.mioffice.cn/wiki/wikk4ySaLeOnJMLgODdOpfDo7hh">https://xiaomi.f.mioffice.cn/wiki/wikk4ySaLeOnJMLgODdOpfDo7hh</a></p><p>repo<a href="https://wiki.n.miui.com/pages/viewpage.action?pageId=411106638">https://wiki.n.miui.com/pages/viewpage.action?pageId=411106638</a></p><p>代码冲突<a href="https://wiki.n.miui.com/pages/viewpage.action?pageId=575356327">https://wiki.n.miui.com/pages/viewpage.action?pageId=575356327</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> gerrit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>about me</title>
      <link href="/2024/07/12/about-me/"/>
      <url>/2024/07/12/about-me/</url>
      
        <content type="html"><![CDATA[<p><img src="/2024/07/12/about-me/20241012-150737.jpg" alt="20241012-150737"></p><h2><span id="关于我">关于我</span></h2><div style="display: flex; align-items: center;">  <div style="flex: 3;background-color: #FFC188; border-radius: 15px; padding: 20px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);">    <strong>🐱个人介绍</strong>    <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;姓名：张缙豪    <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;昵称：敲代码的猫    <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;生日：2002年3月2日    <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;家乡：黑龙江省黑河市    <br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MBTI：INFJ （虽然是东北人但我真的很I）!!!  </div>  <div style="flex: 1; text-align: right;padding: 20px; box-sizing: border-box;">    <img src="/2024/07/12/about-me/20241015-194258.jpg" alt="描述" style="max-height: 85%;max-width: 85%;">  </div></div><h2><span id="关于工作">关于工作</span></h2><div style="background-color: #ACFBB9; border-radius: 15px; padding: 20px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);">💻<strong>公司：</strong>北京小米移动软件有限公司<br>📱<strong>岗位：</strong>软件研发工程师</div><h2><span id="关于爱好">关于爱好</span></h2><div style="background-color: #F0ACFB; border-radius: 15px; padding: 20px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);">🎮<strong>游戏：</strong><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;宝可梦<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;塞尔达传说<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;炉石传说<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;星露谷物语<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(任天堂养生游戏玩家，脱离世俗，远离竞技，大脑放空～)</div><p><img src="/2024/07/12/about-me/image-20241023142007813.png" alt="image-20241023142007813"></p><p><img src="/2024/07/12/about-me/image-20241023142000309.png" alt="image-20241023142000309"></p><p><img src="/2024/07/12/about-me/image-20241023141942936.png" alt="image-20241023141942936"></p><div style="background-color: #F0ACFB; border-radius: 15px; padding: 20px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);">🎥<strong>电影：</strong>喜欢看悬疑电影，可以互推好片～</div>![image-20241029163413907](./about-me/image-20241029163413907.png)<div style="background-color: #F0ACFB; border-radius: 15px; padding: 20px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);">😺<strong>养猫：</strong>下面是我闺女👇👇👇</div>![image-20241029163438847](./about-me/image-20241029163438847.png)<div style="background-color: #F0ACFB; border-radius: 15px; padding: 20px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);">🎧<strong>听歌：</strong>    周杰伦13年铁粉！！</div><p><img src="/2024/07/12/about-me/image-20241029163512126.png" alt="image-20241029163512126"></p><p><img src="/2024/07/12/about-me/image-20241029163537709.png" alt="image-20241029163537709"></p><div style="background-color: #F0ACFB; border-radius: 15px; padding: 20px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);">📸<strong>拍照：</strong>小米徕卡嘎嘎推荐！喜欢拍我女朋友嘿嘿...</div><p><img src="/2024/07/12/about-me/image-20241029163605248.png" alt="image-20241029163605248"><img src="/2024/07/12/about-me/image-20241029163627767.png" alt="image-20241029163627767"></p><h2><span id="关于找到我">关于找到我</span></h2><div style="display: flex; align-items: center;">  <div style="flex: 4;background-color: #FDF294; border-radius: 15px; padding: 20px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);">📌 <br>CSDN：qq_51000584<br>微信：见右侧-><br>微博：敲代码的猫_</div>  <div style="flex: 1; text-align: right;padding: 20px; box-sizing: border-box;">    <img src="/2024/07/12/about-me/8cd2d95c-3c82-448d-be5b-5b4907200fe9.jpg" alt="描述3" style="max-width: 100%; height: auto;">   </div>  <div style="flex: 1; text-align: right;padding: 20px; box-sizing: border-box;">    <img src="/2024/07/12/about-me/c969116bcddc45b58d9b494142915fdf.jpeg" alt="描述3" style="max-width: 135%; height: auto;">  </div></div>]]></content>
      
      
      
        <tags>
            
            <tag> daily </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>教师工作量管理系统</title>
      <link href="/2022/11/16/%E6%95%99%E5%B8%88%E5%B7%A5%E4%BD%9C%E9%87%8F%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
      <url>/2022/11/16/%E6%95%99%E5%B8%88%E5%B7%A5%E4%BD%9C%E9%87%8F%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<p><img src="/2022/11/16/%E6%95%99%E5%B8%88%E5%B7%A5%E4%BD%9C%E9%87%8F%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/20241011-195253.jpg" alt="20241011-195253"></p><h1><span id="教师工作量管理系统链表应用">教师工作量管理系统（链表应用）</span></h1><blockquote><h3><span id="题目描述">题目描述</span></h3><p>教师工作量管理系统问题描述：<br>已知一学校有4门课程（课程编号、课程名称，课时）,5个教师（教师号、姓名、性别、职称），在计算教师工作量时，其计算方法如下表：</p></blockquote><table><thead><tr><th align="center">班级数目</th><th align="center">单个教学任务总课时</th></tr></thead><tbody><tr><td align="center">&lt;&#x3D;2</td><td align="center">1.5*(理论课时＋实验课时）</td></tr><tr><td align="center">3</td><td align="center">2*(理论课时＋实验课时）</td></tr><tr><td align="center">&gt;&#x3D;4</td><td align="center">2.5*(理论课时＋实验课时）</td></tr></tbody></table><blockquote><p>编写一程序，完成以下功能：<br>1)能从文件导入教师的授课信息，文件格式如下：<br>教师编号 课程编号 上课学期</p><p>2)能从键盘录入教师授课信息；</p><p>3)能根据上课学期、课程编号删除授课信息；</p><p>4)能根据上课学期、课程编号修改授课教师；</p><p>5)能计算每个学期的教师工作量；</p><p>6)查询指定教师编号查询授课历史；</p><p>7)能将授课信息导出到文件。</p></blockquote><h3><span id="初始信息">初始信息</span></h3><p>将课程信息、教师信息分别用结构体数组进行存储</p><pre><code class="hljs cpp"><span class="hljs-comment">//存储课程信息</span><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Course</span> &#123;<span class="hljs-type">int</span> id;<span class="hljs-comment">//课程编号</span><span class="hljs-type">int</span> TheoryCHour;<span class="hljs-comment">//理论学时</span><span class="hljs-type">int</span> ExperiCHour;<span class="hljs-comment">//实验学时</span><span class="hljs-type">char</span> name[<span class="hljs-number">20</span>];<span class="hljs-comment">//课程名称</span>&#125;cr[<span class="hljs-number">4</span>];<span class="hljs-comment">//存储教师信息</span><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Teacher</span> &#123;<span class="hljs-type">int</span> id;<span class="hljs-comment">//教师号</span><span class="hljs-type">char</span> name[<span class="hljs-number">20</span>];<span class="hljs-comment">//姓名</span><span class="hljs-type">char</span> sex[<span class="hljs-number">10</span>];<span class="hljs-comment">//性别</span><span class="hljs-type">char</span> prof[<span class="hljs-number">20</span>];<span class="hljs-comment">//职称</span>&#125;tr[<span class="hljs-number">5</span>];</code></pre><p>由于只有4门课程和5名教师，所以设置初始化函数来存储初始信息</p><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InitTeacherInfo</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-comment">//教师信息初始化</span>tr[<span class="hljs-number">0</span>].id = <span class="hljs-number">1001</span>;<span class="hljs-built_in">strcpy</span>(tr[<span class="hljs-number">0</span>].name, <span class="hljs-string">&quot;艾雪&quot;</span>);<span class="hljs-built_in">strcpy</span>(tr[<span class="hljs-number">0</span>].sex, <span class="hljs-string">&quot;女&quot;</span>);<span class="hljs-built_in">strcpy</span>(tr[<span class="hljs-number">0</span>].prof, <span class="hljs-string">&quot;副教授&quot;</span>);tr[<span class="hljs-number">1</span>].id = <span class="hljs-number">1002</span>;<span class="hljs-built_in">strcpy</span>(tr[<span class="hljs-number">1</span>].name, <span class="hljs-string">&quot;张三&quot;</span>);<span class="hljs-built_in">strcpy</span>(tr[<span class="hljs-number">1</span>].sex, <span class="hljs-string">&quot;男&quot;</span>);<span class="hljs-built_in">strcpy</span>(tr[<span class="hljs-number">1</span>].prof, <span class="hljs-string">&quot;讲师&quot;</span>);tr[<span class="hljs-number">2</span>].id = <span class="hljs-number">1003</span>;<span class="hljs-built_in">strcpy</span>(tr[<span class="hljs-number">2</span>].name, <span class="hljs-string">&quot;罗翔&quot;</span>);<span class="hljs-built_in">strcpy</span>(tr[<span class="hljs-number">2</span>].sex, <span class="hljs-string">&quot;男&quot;</span>);<span class="hljs-built_in">strcpy</span>(tr[<span class="hljs-number">2</span>].prof, <span class="hljs-string">&quot;教授&quot;</span>);tr[<span class="hljs-number">3</span>].id = <span class="hljs-number">1004</span>;<span class="hljs-built_in">strcpy</span>(tr[<span class="hljs-number">3</span>].name, <span class="hljs-string">&quot;李四&quot;</span>);<span class="hljs-built_in">strcpy</span>(tr[<span class="hljs-number">3</span>].sex, <span class="hljs-string">&quot;男&quot;</span>);<span class="hljs-built_in">strcpy</span>(tr[<span class="hljs-number">3</span>].prof, <span class="hljs-string">&quot;副教授&quot;</span>);tr[<span class="hljs-number">4</span>].id = <span class="hljs-number">1005</span>;<span class="hljs-built_in">strcpy</span>(tr[<span class="hljs-number">4</span>].name, <span class="hljs-string">&quot;王梅&quot;</span>);<span class="hljs-built_in">strcpy</span>(tr[<span class="hljs-number">4</span>].sex, <span class="hljs-string">&quot;女&quot;</span>);<span class="hljs-built_in">strcpy</span>(tr[<span class="hljs-number">4</span>].prof, <span class="hljs-string">&quot;助教&quot;</span>);&#125;<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InitCourseInfo</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-comment">//课程信息初始化</span>cr[<span class="hljs-number">0</span>].id = <span class="hljs-number">5001</span>;cr[<span class="hljs-number">0</span>].TheoryCHour = <span class="hljs-number">28</span>;cr[<span class="hljs-number">0</span>].ExperiCHour = <span class="hljs-number">8</span>;<span class="hljs-built_in">strcpy</span>(cr[<span class="hljs-number">0</span>].name, <span class="hljs-string">&quot;数据结构&quot;</span>);cr[<span class="hljs-number">1</span>].id = <span class="hljs-number">5002</span>;cr[<span class="hljs-number">1</span>].TheoryCHour = <span class="hljs-number">24</span>;cr[<span class="hljs-number">1</span>].ExperiCHour = <span class="hljs-number">4</span>;<span class="hljs-built_in">strcpy</span>(cr[<span class="hljs-number">1</span>].name, <span class="hljs-string">&quot;单片机&quot;</span>);cr[<span class="hljs-number">2</span>].id = <span class="hljs-number">5003</span>;cr[<span class="hljs-number">2</span>].TheoryCHour = <span class="hljs-number">30</span>;cr[<span class="hljs-number">2</span>].ExperiCHour = <span class="hljs-number">8</span>;<span class="hljs-built_in">strcpy</span>(cr[<span class="hljs-number">2</span>].name, <span class="hljs-string">&quot;c语言程序设计&quot;</span>);cr[<span class="hljs-number">3</span>].id = <span class="hljs-number">5004</span>;cr[<span class="hljs-number">3</span>].TheoryCHour = <span class="hljs-number">26</span>;cr[<span class="hljs-number">3</span>].ExperiCHour = <span class="hljs-number">4</span>;<span class="hljs-built_in">strcpy</span>(cr[<span class="hljs-number">3</span>].name, <span class="hljs-string">&quot;数据库系统&quot;</span>);&#125;</code></pre><h3><span id="菜单部分">菜单部分</span></h3><p>通过参数decide传入不同的值来打印角标在不同的位置，为了实现角标移动效果，在run()函数中调用语句</p><pre><code class="hljs cpp"><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;cls&quot;</span>);</code></pre><p>来进行清屏处理</p><p>当键盘读取到w或↑时，对decide值进行减处理，反之加处理，当decide值越界时进行重置</p><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printMenu1</span><span class="hljs-params">(<span class="hljs-type">int</span> decide)</span> </span>&#123;<span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;cls&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n\n\n\n\n   -------------------------------\n&quot;</span>);<span class="hljs-keyword">switch</span> (decide) &#123;<span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;       &gt;1.从文件导入授课信息\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;        2.授课信息录入\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;        3.授课信息删除\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;        4.授课教师修改\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;        5.工作量计算\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;        6.查询授课历史\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;        7.授课信息导出到文件\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;        8.退出\n&quot;</span>);<span class="hljs-keyword">break</span>;<span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;        1.从文件导入授课信息\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;       &gt;2.授课信息录入\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;        3.授课信息删除\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;        4.授课教师修改\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;        5.工作量计算\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;        6.查询授课历史\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;        7.授课信息导出到文件\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;        8.退出\n&quot;</span>);<span class="hljs-keyword">break</span>;<span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;        1.从文件导入授课信息\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;        2.授课信息录入\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;       &gt;3.授课信息删除\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;        4.授课教师修改\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;        5.工作量计算\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;        6.查询授课历史\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;        7.授课信息导出到文件\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;        8.退出\n&quot;</span>);<span class="hljs-keyword">break</span>;<span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;        1.从文件导入授课信息\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;        2.授课信息录入\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;        3.授课信息删除\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;       &gt;4.授课教师修改\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;        5.工作量计算\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;        6.查询授课历史\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;        7.授课信息导出到文件\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;        8.退出\n&quot;</span>);<span class="hljs-keyword">break</span>;<span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;        1.从文件导入授课信息\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;        2.授课信息录入\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;        3.授课信息删除\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;        4.授课教师修改\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;       &gt;5.工作量计算\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;        6.查询授课历史\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;        7.授课信息导出到文件\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;        8.退出\n&quot;</span>);<span class="hljs-keyword">break</span>;<span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;        1.从文件导入授课信息\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;        2.授课信息录入\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;        3.授课信息删除\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;        4.授课教师修改\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;        5.工作量计算\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;       &gt;6.查询授课历史\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;        7.授课信息导出到文件\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;        8.退出\n&quot;</span>);<span class="hljs-keyword">break</span>;<span class="hljs-keyword">case</span> <span class="hljs-number">7</span>:<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;        1.从文件导入授课信息\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;        2.授课信息录入\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;        3.授课信息删除\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;        4.授课教师修改\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;        5.工作量计算\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;        6.查询授课历史\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;       &gt;7.授课信息导出到文件\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;        8.退出\n&quot;</span>);<span class="hljs-keyword">break</span>;<span class="hljs-keyword">case</span> <span class="hljs-number">8</span>:<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;        1.从文件导入授课信息\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;        2.授课信息录入\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;        3.授课信息删除\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;        4.授课教师修改\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;        5.工作量计算\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;        6.查询授课历史\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;        7.授课信息导出到文件\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;       &gt;8.退出\n&quot;</span>);<span class="hljs-keyword">break</span>;&#125;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;   -------------------------------\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;   ----按w s或↑↓选择菜单选项 ---\n&quot;</span>);&#125;</code></pre><h3><span id="数据结构">数据结构</span></h3><p>将教师授课信息及工作量信息用链表进行存储。在run函数中创建头节点。当信息增加时在链表尾部进行节点增加。信息修改只需遍历链表找到对应信息位置从而修改其值即可。删除信息同理需遍历链表找到对应信息位置删除节点，使被删除节点的前驱和后继相连。</p><pre><code class="hljs cpp"><span class="hljs-comment">//链表定义</span><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Workload</span> &#123;<span class="hljs-type">int</span> TheoryCHour;<span class="hljs-comment">//课时</span><span class="hljs-type">int</span> ExperiCHour;<span class="hljs-comment">//课时</span><span class="hljs-type">int</span> ClassNum;<span class="hljs-comment">//班级数</span><span class="hljs-type">char</span> term[<span class="hljs-number">10</span>];<span class="hljs-keyword">struct</span> <span class="hljs-title class_">Workload</span>* next;&#125;Workload, * WorkList;<span class="hljs-comment">//存储教师授课信息</span><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span> &#123;<span class="hljs-type">int</span> tId;<span class="hljs-comment">//教师号</span><span class="hljs-type">int</span> cId;<span class="hljs-comment">//课程编号</span><span class="hljs-type">char</span> term[<span class="hljs-number">10</span>];<span class="hljs-comment">//学期</span><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span>* next;&#125;Node, * LinkList;</code></pre><p>节点增加</p><pre><code class="hljs cpp"><span class="hljs-comment">//节点增加</span><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ListAdd</span><span class="hljs-params">(LinkList L, <span class="hljs-type">int</span> tid, <span class="hljs-type">int</span> cid, <span class="hljs-type">char</span> str[])</span> </span>&#123;<span class="hljs-type">int</span> j;LinkList p, s;p = L;<span class="hljs-keyword">while</span> (p-&gt;next) &#123;p = p-&gt;next;&#125;s = (LinkList)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(Node));s-&gt;cId = cid;s-&gt;tId = tid;<span class="hljs-built_in">strcpy</span>(s-&gt;term, str);p-&gt;next = s;s-&gt;next = <span class="hljs-literal">NULL</span>;&#125;</code></pre><p>链表遍历</p><pre><code class="hljs cpp"><span class="hljs-comment">//遍历</span><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">TraverseList</span><span class="hljs-params">(LinkList L)</span> </span>&#123;LinkList p, q;p = L-&gt;next;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;教师授课历史\n\n\n&quot;</span>);<span class="hljs-keyword">while</span> (p) &#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d %s\n&quot;</span>, p-&gt;cId, p-&gt;tId, p-&gt;term);p = p-&gt;next;&#125;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n\n\n&quot;</span>);&#125;</code></pre><h3><span id="功能实现">功能实现</span></h3><h4><span id="查询历史信息">查询历史信息</span></h4><p>即遍历链表输出所有授课信息，直接调用遍历函数即可</p><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InfoShow</span><span class="hljs-params">(LinkList L)</span> </span>&#123;<span class="hljs-built_in">TraverseList</span>(L);&#125;</code></pre><h4><span id="从键盘录入信息">从键盘录入信息</span></h4><p>输入题目要求的教师编号，课程编号和上课学期存储到相应变量，存储成功后调用节点增加函数即可实现存储信息</p><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InfoInput</span><span class="hljs-params">(LinkList L)</span> </span>&#123;<span class="hljs-type">int</span> cid, tid;<span class="hljs-type">char</span> str[<span class="hljs-number">10</span>];<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;     信息录入:\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;     请输入教师编号:\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;     &quot;</span>);<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;tid);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;     请输入课程编号:\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;     &quot;</span>);<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;cid);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;     请输入上课学期:\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;     &quot;</span>);<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, str);<span class="hljs-built_in">ListAdd</span>(L, tid, cid, str);<span class="hljs-comment">//节点增加函数</span><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;信息录入成功！\n&quot;</span>);&#125;</code></pre><h4><span id="信息删除和修改">信息删除和修改</span></h4><p>输入课程编号和上课学期通过遍历链表查找信息，若未找到，打印“未查到该授课信息”退出函数，若找到在对应节点位置进行信息的修改和删除。</p><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InfoDelete</span><span class="hljs-params">(LinkList L)</span> </span>&#123;<span class="hljs-type">int</span> cid;<span class="hljs-type">int</span> flag = <span class="hljs-number">0</span>;<span class="hljs-type">char</span> str[<span class="hljs-number">10</span>];<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;     信息删除:\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;     请输入课程编号:\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;     &quot;</span>);<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;cid);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;     请输入上课学期:\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;     &quot;</span>);<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, str);LinkList p, q;p = L;<span class="hljs-keyword">while</span> (p-&gt;next) &#123;<span class="hljs-keyword">if</span> (p-&gt;next-&gt;cId == cid &amp;&amp; !<span class="hljs-built_in">strcmp</span>(p-&gt;next-&gt;term, str)) &#123;flag = <span class="hljs-number">1</span>;<span class="hljs-keyword">break</span>;&#125;p = p-&gt;next;&#125;<span class="hljs-keyword">if</span> (!flag) &#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;未查到该授课信息\n&quot;</span>);<span class="hljs-keyword">return</span>;&#125;q = p-&gt;next;p-&gt;next = q-&gt;next;<span class="hljs-built_in">free</span>(q);<span class="hljs-comment">//回收资源</span><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;信息删除成功！\n&quot;</span>);&#125;<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InfoAlter</span><span class="hljs-params">(LinkList L)</span> </span>&#123;<span class="hljs-type">int</span> cid, tid;<span class="hljs-type">int</span> flag = <span class="hljs-number">0</span>;<span class="hljs-type">char</span> str[<span class="hljs-number">10</span>];<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;     信息修改:\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;     请输入课程编号:\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;     &quot;</span>);<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;cid);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;     请输入上课学期:\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;     &quot;</span>);<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, str);LinkList p;p = L;<span class="hljs-keyword">while</span> (p-&gt;next) &#123;<span class="hljs-keyword">if</span> (p-&gt;next-&gt;cId == cid &amp;&amp; !<span class="hljs-built_in">strcmp</span>(p-&gt;next-&gt;term, str)) &#123;flag = <span class="hljs-number">1</span>;<span class="hljs-keyword">break</span>;&#125;p = p-&gt;next;&#125;<span class="hljs-keyword">if</span> (!flag) &#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;未查到该授课信息\n&quot;</span>);<span class="hljs-keyword">return</span>;&#125;p = p-&gt;next;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;     当前授课信息为:\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;     %d %d %s\n&quot;</span>, p-&gt;cId, p-&gt;tId, p-&gt;term);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;     是否修改？（y/n）\n     &quot;</span>);<span class="hljs-comment">//询问是否修改</span><span class="hljs-type">char</span> s;<span class="hljs-built_in">getchar</span>();<span class="hljs-comment">//吸收回车</span><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%c&quot;</span>, &amp;s);<span class="hljs-keyword">if</span> (s == <span class="hljs-string">&#x27;y&#x27;</span> || s == <span class="hljs-string">&#x27;Y&#x27;</span>) &#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;     请输入教师编号:\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;     &quot;</span>);<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;tid);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;     请输入课程编号:\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;     &quot;</span>);<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;cid);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;     请输入上课学期:\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;     &quot;</span>);<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, str);p-&gt;tId = tid;p-&gt;cId = cid;<span class="hljs-built_in">strcpy</span>(p-&gt;term, str);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;信息修改成功！\n&quot;</span>);&#125;<span class="hljs-keyword">else</span> &#123;<span class="hljs-keyword">return</span>;&#125;&#125;</code></pre><h4><span id="工作量计算">工作量计算</span></h4><p>是这里最复杂的一个函数，需要对两个链表进行操作。首先用户输入教师编号，并传参给函数，然后遍历教师信息查到后打印。接着遍历授课信息链表查找含有该教师编号的节点，一旦找到便存储到工作量信息链表中。</p><h5><span id="如何存储到工作量信息链表中">如何存储到工作量信息链表中？</span></h5><p>这里假设A教师有5次授课信息在授课信息链表中，其中1学期2次，2学期2次，3学期一次。由于工作量的计算是按照学期划分的，因此采用如下存储方式：</p><p>当第一次在授课信息链表中找到含有该教师编号的节点，直接存储到工作量信息链表中。</p><p>从第二次找到该教师编号的节点起，都遍历一次工作量信息链表，若有学期相同的节点，则不创建新节点存储工作量信息，而是和上一次存储的工作量信息进行叠加,班级数加一。</p><p>若遍历工作量信息链表后没有学期相同的节点，则再创建新节点存储。</p><h5><span id="工作量信息计算">工作量信息计算</span></h5><p>遍历工作量信息链表，对于每一个节点的课时，班级数来分类计算结果并输出。</p><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">WorkCalcul</span><span class="hljs-params">(LinkList L, <span class="hljs-type">int</span> tid)</span> </span>&#123;<span class="hljs-type">int</span> i, flag = <span class="hljs-number">0</span>, j;LinkList p;WorkList w, s, tp;w = (WorkList)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(Workload));w-&gt;next = <span class="hljs-literal">NULL</span>;s = w;p = L-&gt;next;<span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<span class="hljs-keyword">if</span> (tr[i].id == tid) &#123;flag = <span class="hljs-number">1</span>;<span class="hljs-keyword">break</span>;&#125;&#125;<span class="hljs-keyword">if</span> (!flag) &#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;教师信息不存在:\n&quot;</span>);<span class="hljs-keyword">return</span>;&#125;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;教师信息:\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;编号:%d\n&quot;</span>, tr[i].id);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;姓名:%s\n&quot;</span>, tr[i].name);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;性别:%s\n&quot;</span>, tr[i].sex);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;职称:%s\n&quot;</span>, tr[i].prof);<span class="hljs-keyword">while</span> (p) &#123;<span class="hljs-keyword">if</span> (p-&gt;tId == tid) &#123;s = w;<span class="hljs-keyword">while</span> (s-&gt;next) &#123;<span class="hljs-keyword">if</span> (!<span class="hljs-built_in">strcmp</span>(s-&gt;next-&gt;term, p-&gt;term)) &#123;<span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++) &#123;<span class="hljs-keyword">if</span> (cr[i].id == p-&gt;cId) &#123;s-&gt;next-&gt;ExperiCHour += cr[i].ExperiCHour;s-&gt;next-&gt;TheoryCHour += cr[i].TheoryCHour;&#125;&#125;s-&gt;next-&gt;ClassNum++;<span class="hljs-keyword">break</span>;&#125;s = s-&gt;next;&#125;<span class="hljs-keyword">if</span> (!s-&gt;next) &#123;tp = (WorkList)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(Workload));tp-&gt;ClassNum = <span class="hljs-number">1</span>;<span class="hljs-built_in">strcpy</span>(tp-&gt;term, p-&gt;term);<span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++) &#123;<span class="hljs-keyword">if</span> (cr[i].id == p-&gt;cId) &#123;tp-&gt;ExperiCHour = cr[i].ExperiCHour;tp-&gt;TheoryCHour = cr[i].TheoryCHour;&#125;&#125;tp-&gt;next = <span class="hljs-literal">NULL</span>;s-&gt;next = tp;&#125;&#125;p = p-&gt;next;&#125;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;教师工作量:\n&quot;</span>);s = w-&gt;next;<span class="hljs-keyword">while</span> (s) &#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;学期:%s &quot;</span>, s-&gt;term);<span class="hljs-keyword">if</span> (s-&gt;ClassNum &lt;= <span class="hljs-number">2</span>) &#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;工作量:%.2f\n&quot;</span>, (s-&gt;ExperiCHour + s-&gt;TheoryCHour) * <span class="hljs-number">1.5</span>);&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (s-&gt;ClassNum == <span class="hljs-number">3</span>) &#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;工作量:%.2f\n&quot;</span>, (s-&gt;ExperiCHour + s-&gt;TheoryCHour) * <span class="hljs-number">2</span>);&#125;<span class="hljs-keyword">else</span> &#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;工作量:%.2f\n&quot;</span>, (s-&gt;ExperiCHour + s-&gt;TheoryCHour) * <span class="hljs-number">2.5</span>);&#125;s = s-&gt;next;&#125;&#125;</code></pre><h3><span id="文件导入和输出">文件导入和输出</span></h3><p>使用文件读取和写入操作，写入时直接将信息打印在txt文本中,读取时，先读取文本中字符串，再对字符串进行分解，分离出字符串中的int类型变量和字符串变量。这里注意不同的集成开发环境的编码方式不同，若和txt文本不是同一种编码方式则会出现乱码情况。</p><h3><span id="完整代码">完整代码</span></h3><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;malloc.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;conio.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><span class="hljs-comment">//存储课程信息</span><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Course</span> &#123;<span class="hljs-type">int</span> id;<span class="hljs-comment">//课程编号</span><span class="hljs-type">int</span> TheoryCHour;<span class="hljs-comment">//课时</span><span class="hljs-type">int</span> ExperiCHour;<span class="hljs-comment">//课时</span><span class="hljs-type">char</span> name[<span class="hljs-number">20</span>];<span class="hljs-comment">//课程名称</span>&#125;cr[<span class="hljs-number">4</span>];<span class="hljs-comment">//存储教师信息</span><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Teacher</span> &#123;<span class="hljs-type">int</span> id;<span class="hljs-comment">//教师号</span><span class="hljs-type">char</span> name[<span class="hljs-number">20</span>];<span class="hljs-comment">//姓名</span><span class="hljs-type">char</span> sex[<span class="hljs-number">10</span>];<span class="hljs-comment">//性别</span><span class="hljs-type">char</span> prof[<span class="hljs-number">20</span>];<span class="hljs-comment">//职称</span>&#125;tr[<span class="hljs-number">5</span>];<span class="hljs-comment">//存储每学期工作量</span><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Workload</span> &#123;<span class="hljs-type">int</span> TheoryCHour;<span class="hljs-comment">//课时</span><span class="hljs-type">int</span> ExperiCHour;<span class="hljs-comment">//课时</span><span class="hljs-type">int</span> ClassNum;<span class="hljs-type">char</span> term[<span class="hljs-number">10</span>];<span class="hljs-keyword">struct</span> <span class="hljs-title class_">Workload</span>* next;&#125;Workload, * WorkList;<span class="hljs-comment">//存储教师授课信息</span><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span> &#123;<span class="hljs-type">int</span> tId;<span class="hljs-comment">//教师号</span><span class="hljs-type">int</span> cId;<span class="hljs-comment">//课程编号</span><span class="hljs-type">char</span> term[<span class="hljs-number">10</span>];<span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span>* next;&#125;Node, * LinkList;<span class="hljs-comment">//节点增加</span><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ListAdd</span><span class="hljs-params">(LinkList L, <span class="hljs-type">int</span> tid, <span class="hljs-type">int</span> cid, <span class="hljs-type">char</span> str[])</span> </span>&#123;<span class="hljs-type">int</span> j;LinkList p, s;p = L;<span class="hljs-keyword">while</span> (p-&gt;next) &#123;p = p-&gt;next;&#125;s = (LinkList)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(Node));s-&gt;cId = cid;s-&gt;tId = tid;<span class="hljs-built_in">strcpy</span>(s-&gt;term, str);p-&gt;next = s;s-&gt;next = <span class="hljs-literal">NULL</span>;&#125;<span class="hljs-comment">//遍历</span><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">TraverseList</span><span class="hljs-params">(LinkList L)</span> </span>&#123;LinkList p, q;p = L-&gt;next;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;教师授课历史\n\n\n&quot;</span>);<span class="hljs-keyword">while</span> (p) &#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d %s\n&quot;</span>, p-&gt;cId, p-&gt;tId, p-&gt;term);p = p-&gt;next;&#125;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n\n\n&quot;</span>);&#125;<span class="hljs-comment">//1.从文件导入教师的授课信息</span><span class="hljs-comment">//教师编号 课程编号 上课学期</span><span class="hljs-comment">//</span><span class="hljs-comment">//7.能将授课信息导出到文件</span><span class="hljs-comment">//</span><span class="hljs-comment">//</span><span class="hljs-comment">//</span><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InitTeacherInfo</span><span class="hljs-params">()</span> </span>&#123;tr[<span class="hljs-number">0</span>].id = <span class="hljs-number">1001</span>;<span class="hljs-built_in">strcpy</span>(tr[<span class="hljs-number">0</span>].name, <span class="hljs-string">&quot;艾雪&quot;</span>);<span class="hljs-built_in">strcpy</span>(tr[<span class="hljs-number">0</span>].sex, <span class="hljs-string">&quot;女&quot;</span>);<span class="hljs-built_in">strcpy</span>(tr[<span class="hljs-number">0</span>].prof, <span class="hljs-string">&quot;副教授&quot;</span>);tr[<span class="hljs-number">1</span>].id = <span class="hljs-number">1002</span>;<span class="hljs-built_in">strcpy</span>(tr[<span class="hljs-number">1</span>].name, <span class="hljs-string">&quot;张三&quot;</span>);<span class="hljs-built_in">strcpy</span>(tr[<span class="hljs-number">1</span>].sex, <span class="hljs-string">&quot;男&quot;</span>);<span class="hljs-built_in">strcpy</span>(tr[<span class="hljs-number">1</span>].prof, <span class="hljs-string">&quot;讲师&quot;</span>);tr[<span class="hljs-number">2</span>].id = <span class="hljs-number">1003</span>;<span class="hljs-built_in">strcpy</span>(tr[<span class="hljs-number">2</span>].name, <span class="hljs-string">&quot;罗翔&quot;</span>);<span class="hljs-built_in">strcpy</span>(tr[<span class="hljs-number">2</span>].sex, <span class="hljs-string">&quot;男&quot;</span>);<span class="hljs-built_in">strcpy</span>(tr[<span class="hljs-number">2</span>].prof, <span class="hljs-string">&quot;教授&quot;</span>);tr[<span class="hljs-number">3</span>].id = <span class="hljs-number">1004</span>;<span class="hljs-built_in">strcpy</span>(tr[<span class="hljs-number">3</span>].name, <span class="hljs-string">&quot;李四&quot;</span>);<span class="hljs-built_in">strcpy</span>(tr[<span class="hljs-number">3</span>].sex, <span class="hljs-string">&quot;男&quot;</span>);<span class="hljs-built_in">strcpy</span>(tr[<span class="hljs-number">3</span>].prof, <span class="hljs-string">&quot;副教授&quot;</span>);tr[<span class="hljs-number">4</span>].id = <span class="hljs-number">1005</span>;<span class="hljs-built_in">strcpy</span>(tr[<span class="hljs-number">4</span>].name, <span class="hljs-string">&quot;王梅&quot;</span>);<span class="hljs-built_in">strcpy</span>(tr[<span class="hljs-number">4</span>].sex, <span class="hljs-string">&quot;女&quot;</span>);<span class="hljs-built_in">strcpy</span>(tr[<span class="hljs-number">4</span>].prof, <span class="hljs-string">&quot;助教&quot;</span>);&#125;<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InitCourseInfo</span><span class="hljs-params">()</span> </span>&#123;cr[<span class="hljs-number">0</span>].id = <span class="hljs-number">5001</span>;cr[<span class="hljs-number">0</span>].TheoryCHour = <span class="hljs-number">28</span>;cr[<span class="hljs-number">0</span>].ExperiCHour = <span class="hljs-number">8</span>;<span class="hljs-built_in">strcpy</span>(cr[<span class="hljs-number">0</span>].name, <span class="hljs-string">&quot;数据结构&quot;</span>);cr[<span class="hljs-number">1</span>].id = <span class="hljs-number">5002</span>;cr[<span class="hljs-number">1</span>].TheoryCHour = <span class="hljs-number">24</span>;cr[<span class="hljs-number">1</span>].ExperiCHour = <span class="hljs-number">4</span>;<span class="hljs-built_in">strcpy</span>(cr[<span class="hljs-number">1</span>].name, <span class="hljs-string">&quot;单片机&quot;</span>);cr[<span class="hljs-number">2</span>].id = <span class="hljs-number">5003</span>;cr[<span class="hljs-number">2</span>].TheoryCHour = <span class="hljs-number">30</span>;cr[<span class="hljs-number">2</span>].ExperiCHour = <span class="hljs-number">8</span>;<span class="hljs-built_in">strcpy</span>(cr[<span class="hljs-number">2</span>].name, <span class="hljs-string">&quot;c语言程序设计&quot;</span>);cr[<span class="hljs-number">3</span>].id = <span class="hljs-number">5004</span>;cr[<span class="hljs-number">3</span>].TheoryCHour = <span class="hljs-number">26</span>;cr[<span class="hljs-number">3</span>].ExperiCHour = <span class="hljs-number">4</span>;<span class="hljs-built_in">strcpy</span>(cr[<span class="hljs-number">3</span>].name, <span class="hljs-string">&quot;数据库系统&quot;</span>);&#125;<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printMenu1</span><span class="hljs-params">(<span class="hljs-type">int</span> decide)</span> </span>&#123;<span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;cls&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n\n\n\n\n   -------------------------------\n&quot;</span>);<span class="hljs-keyword">switch</span> (decide) &#123;<span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;       &gt;1.从文件导入授课信息\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;        2.授课信息录入\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;        3.授课信息删除\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;        4.授课教师修改\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;        5.工作量计算\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;        6.查询授课历史\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;        7.授课信息导出到文件\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;        8.退出\n&quot;</span>);<span class="hljs-keyword">break</span>;<span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;        1.从文件导入授课信息\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;       &gt;2.授课信息录入\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;        3.授课信息删除\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;        4.授课教师修改\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;        5.工作量计算\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;        6.查询授课历史\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;        7.授课信息导出到文件\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;        8.退出\n&quot;</span>);<span class="hljs-keyword">break</span>;<span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;        1.从文件导入授课信息\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;        2.授课信息录入\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;       &gt;3.授课信息删除\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;        4.授课教师修改\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;        5.工作量计算\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;        6.查询授课历史\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;        7.授课信息导出到文件\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;        8.退出\n&quot;</span>);<span class="hljs-keyword">break</span>;<span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;        1.从文件导入授课信息\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;        2.授课信息录入\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;        3.授课信息删除\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;       &gt;4.授课教师修改\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;        5.工作量计算\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;        6.查询授课历史\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;        7.授课信息导出到文件\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;        8.退出\n&quot;</span>);<span class="hljs-keyword">break</span>;<span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;        1.从文件导入授课信息\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;        2.授课信息录入\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;        3.授课信息删除\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;        4.授课教师修改\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;       &gt;5.工作量计算\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;        6.查询授课历史\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;        7.授课信息导出到文件\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;        8.退出\n&quot;</span>);<span class="hljs-keyword">break</span>;<span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;        1.从文件导入授课信息\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;        2.授课信息录入\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;        3.授课信息删除\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;        4.授课教师修改\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;        5.工作量计算\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;       &gt;6.查询授课历史\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;        7.授课信息导出到文件\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;        8.退出\n&quot;</span>);<span class="hljs-keyword">break</span>;<span class="hljs-keyword">case</span> <span class="hljs-number">7</span>:<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;        1.从文件导入授课信息\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;        2.授课信息录入\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;        3.授课信息删除\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;        4.授课教师修改\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;        5.工作量计算\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;        6.查询授课历史\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;       &gt;7.授课信息导出到文件\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;        8.退出\n&quot;</span>);<span class="hljs-keyword">break</span>;<span class="hljs-keyword">case</span> <span class="hljs-number">8</span>:<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;        1.从文件导入授课信息\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;        2.授课信息录入\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;        3.授课信息删除\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;        4.授课教师修改\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;        5.工作量计算\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;        6.查询授课历史\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;        7.授课信息导出到文件\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;       &gt;8.退出\n&quot;</span>);<span class="hljs-keyword">break</span>;&#125;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;   -------------------------------\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;   ----按w s或↑↓选择菜单选项 ---\n&quot;</span>);&#125;<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InfoInput</span><span class="hljs-params">(LinkList L)</span> </span>&#123;<span class="hljs-type">int</span> cid, tid;<span class="hljs-type">char</span> str[<span class="hljs-number">10</span>];<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;     信息录入:\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;     请输入教师编号:\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;     &quot;</span>);<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;tid);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;     请输入课程编号:\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;     &quot;</span>);<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;cid);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;     请输入上课学期:\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;     &quot;</span>);<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, str);<span class="hljs-built_in">ListAdd</span>(L, tid, cid, str);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;信息录入成功！\n&quot;</span>);&#125;<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InfoDelete</span><span class="hljs-params">(LinkList L)</span> </span>&#123;<span class="hljs-type">int</span> cid;<span class="hljs-type">int</span> flag = <span class="hljs-number">0</span>;<span class="hljs-type">char</span> str[<span class="hljs-number">10</span>];<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;     信息删除:\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;     请输入课程编号:\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;     &quot;</span>);<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;cid);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;     请输入上课学期:\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;     &quot;</span>);<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, str);LinkList p, q;p = L;<span class="hljs-keyword">while</span> (p-&gt;next) &#123;<span class="hljs-keyword">if</span> (p-&gt;next-&gt;cId == cid &amp;&amp; !<span class="hljs-built_in">strcmp</span>(p-&gt;next-&gt;term, str)) &#123;flag = <span class="hljs-number">1</span>;<span class="hljs-keyword">break</span>;&#125;p = p-&gt;next;&#125;<span class="hljs-keyword">if</span> (!flag) &#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;未查到该授课信息\n&quot;</span>);<span class="hljs-keyword">return</span>;&#125;q = p-&gt;next;p-&gt;next = q-&gt;next;<span class="hljs-built_in">free</span>(q);<span class="hljs-comment">//回收资源</span><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;信息删除成功！\n&quot;</span>);&#125;<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InfoAlter</span><span class="hljs-params">(LinkList L)</span> </span>&#123;<span class="hljs-type">int</span> cid, tid;<span class="hljs-type">int</span> flag = <span class="hljs-number">0</span>;<span class="hljs-type">char</span> str[<span class="hljs-number">10</span>];<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;     信息修改:\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;     请输入课程编号:\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;     &quot;</span>);<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;cid);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;     请输入上课学期:\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;     &quot;</span>);<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, str);LinkList p;p = L;<span class="hljs-keyword">while</span> (p-&gt;next) &#123;<span class="hljs-keyword">if</span> (p-&gt;next-&gt;cId == cid &amp;&amp; !<span class="hljs-built_in">strcmp</span>(p-&gt;next-&gt;term, str)) &#123;flag = <span class="hljs-number">1</span>;<span class="hljs-keyword">break</span>;&#125;p = p-&gt;next;&#125;<span class="hljs-keyword">if</span> (!flag) &#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;未查到该授课信息\n&quot;</span>);<span class="hljs-keyword">return</span>;&#125;p = p-&gt;next;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;     当前授课信息为:\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;     %d %d %s\n&quot;</span>, p-&gt;cId, p-&gt;tId, p-&gt;term);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;     是否修改？（y/n）\n     &quot;</span>);<span class="hljs-type">char</span> s;<span class="hljs-built_in">getchar</span>();<span class="hljs-comment">//吸收回车</span><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%c&quot;</span>, &amp;s);<span class="hljs-keyword">if</span> (s == <span class="hljs-string">&#x27;y&#x27;</span> || s == <span class="hljs-string">&#x27;Y&#x27;</span>) &#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;     请输入教师编号:\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;     &quot;</span>);<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;tid);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;     请输入课程编号:\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;     &quot;</span>);<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;cid);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;     请输入上课学期:\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;     &quot;</span>);<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, str);p-&gt;tId = tid;p-&gt;cId = cid;<span class="hljs-built_in">strcpy</span>(p-&gt;term, str);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;信息修改成功！\n&quot;</span>);&#125;<span class="hljs-keyword">else</span> &#123;<span class="hljs-keyword">return</span>;&#125;&#125;<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InfoShow</span><span class="hljs-params">(LinkList L)</span> </span>&#123;<span class="hljs-built_in">TraverseList</span>(L);&#125;<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">WorkCalcul</span><span class="hljs-params">(LinkList L, <span class="hljs-type">int</span> tid)</span> </span>&#123;<span class="hljs-type">int</span> i, flag = <span class="hljs-number">0</span>, j;LinkList p;WorkList w, s, tp;w = (WorkList)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(Workload));w-&gt;next = <span class="hljs-literal">NULL</span>;s = w;p = L-&gt;next;<span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<span class="hljs-keyword">if</span> (tr[i].id == tid) &#123;flag = <span class="hljs-number">1</span>;<span class="hljs-keyword">break</span>;&#125;&#125;<span class="hljs-keyword">if</span> (!flag) &#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;教师信息不存在:\n&quot;</span>);<span class="hljs-keyword">return</span>;&#125;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;教师信息:\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;编号:%d\n&quot;</span>, tr[i].id);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;姓名:%s\n&quot;</span>, tr[i].name);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;性别:%s\n&quot;</span>, tr[i].sex);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;职称:%s\n&quot;</span>, tr[i].prof);<span class="hljs-keyword">while</span> (p) &#123;<span class="hljs-keyword">if</span> (p-&gt;tId == tid) &#123;s = w;<span class="hljs-keyword">while</span> (s-&gt;next) &#123;<span class="hljs-keyword">if</span> (!<span class="hljs-built_in">strcmp</span>(s-&gt;next-&gt;term, p-&gt;term)) &#123;<span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++) &#123;<span class="hljs-keyword">if</span> (cr[i].id == p-&gt;cId) &#123;s-&gt;next-&gt;ExperiCHour += cr[i].ExperiCHour;s-&gt;next-&gt;TheoryCHour += cr[i].TheoryCHour;&#125;&#125;s-&gt;next-&gt;ClassNum++;<span class="hljs-keyword">break</span>;&#125;s = s-&gt;next;&#125;<span class="hljs-keyword">if</span> (!s-&gt;next) &#123;tp = (WorkList)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(Workload));tp-&gt;ClassNum = <span class="hljs-number">1</span>;<span class="hljs-built_in">strcpy</span>(tp-&gt;term, p-&gt;term);<span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++) &#123;<span class="hljs-keyword">if</span> (cr[i].id == p-&gt;cId) &#123;tp-&gt;ExperiCHour = cr[i].ExperiCHour;tp-&gt;TheoryCHour = cr[i].TheoryCHour;&#125;&#125;tp-&gt;next = <span class="hljs-literal">NULL</span>;s-&gt;next = tp;&#125;&#125;p = p-&gt;next;&#125;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;教师工作量:\n&quot;</span>);s = w-&gt;next;<span class="hljs-keyword">while</span> (s) &#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;学期:%s &quot;</span>, s-&gt;term);<span class="hljs-keyword">if</span> (s-&gt;ClassNum &lt;= <span class="hljs-number">2</span>) &#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;工作量:%.2f\n&quot;</span>, (s-&gt;ExperiCHour + s-&gt;TheoryCHour) * <span class="hljs-number">1.5</span>);&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (s-&gt;ClassNum == <span class="hljs-number">3</span>) &#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;工作量:%.2f\n&quot;</span>, (s-&gt;ExperiCHour + s-&gt;TheoryCHour) * <span class="hljs-number">2</span>);&#125;<span class="hljs-keyword">else</span> &#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;工作量:%.2f\n&quot;</span>, (s-&gt;ExperiCHour + s-&gt;TheoryCHour) * <span class="hljs-number">2.5</span>);&#125;s = s-&gt;next;&#125;&#125;<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-type">char</span> keyIn;<span class="hljs-type">int</span> decide = <span class="hljs-number">1</span>;LinkList L;L = (LinkList)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(Node));L-&gt;next = <span class="hljs-literal">NULL</span>;begin:<span class="hljs-built_in">printMenu1</span>(decide);<span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;keyIn = _getch();<span class="hljs-keyword">if</span> (keyIn == <span class="hljs-number">13</span>) &#123;<span class="hljs-keyword">break</span>;<span class="hljs-comment">//回车检测</span>&#125;<span class="hljs-keyword">switch</span> (keyIn)&#123;<span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;w&#x27;</span>:<span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;W&#x27;</span>:<span class="hljs-keyword">case</span> <span class="hljs-number">72</span>:decide--;<span class="hljs-keyword">break</span>;<span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;s&#x27;</span>:<span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;S&#x27;</span>:<span class="hljs-keyword">case</span> <span class="hljs-number">80</span>:decide++;<span class="hljs-keyword">break</span>;<span class="hljs-keyword">default</span>:<span class="hljs-keyword">break</span>;&#125;<span class="hljs-keyword">if</span> (decide &gt; <span class="hljs-number">8</span>) &#123;decide = <span class="hljs-number">1</span>;&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (decide &lt; <span class="hljs-number">1</span>) &#123;decide = <span class="hljs-number">8</span>;&#125;<span class="hljs-built_in">printMenu1</span>(decide);&#125;<span class="hljs-keyword">if</span> (decide == <span class="hljs-number">1</span>) &#123;<span class="hljs-comment">//1.从文件导入授课信息</span><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;cls&quot;</span>);<span class="hljs-type">int</span> tid = <span class="hljs-number">0</span>, cid = <span class="hljs-number">0</span>;        <span class="hljs-type">int</span> flag = <span class="hljs-number">0</span>;        <span class="hljs-type">char</span> term[<span class="hljs-number">10</span>];        FILE* p;        <span class="hljs-type">char</span> ch;        <span class="hljs-type">char</span> str[<span class="hljs-number">10005</span>];<span class="hljs-comment">//用来存储txt文件中的字符串</span>        <span class="hljs-type">int</span> i, num[<span class="hljs-number">256</span>] = &#123; <span class="hljs-number">0</span> &#125;;        <span class="hljs-keyword">if</span> ((p = <span class="hljs-built_in">fopen</span>(<span class="hljs-string">&quot;D:\\test.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>)) == <span class="hljs-literal">NULL</span>)  <span class="hljs-comment">//以只读的方式打开test。</span>        &#123;            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ERROR&quot;</span>);        &#125;        <span class="hljs-type">int</span> k = <span class="hljs-number">0</span>;        <span class="hljs-keyword">for</span> (; ch != <span class="hljs-string">&#x27;\n&#x27;</span>;)        &#123;            ch = <span class="hljs-built_in">fgetc</span>(p);   <span class="hljs-comment">//ch得到p所指文件中的每一个字符</span>            <span class="hljs-keyword">if</span> (ch != <span class="hljs-number">32</span>) &#123;                str[k] = ch;                k++;            &#125;            <span class="hljs-keyword">else</span> &#123;                <span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;                <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; str[j] != <span class="hljs-string">&#x27;\0&#x27;</span>; j++) &#123;                    <span class="hljs-keyword">if</span> (!flag)                        tid = tid * <span class="hljs-number">10</span> + str[j] - <span class="hljs-string">&#x27;0&#x27;</span>;                    <span class="hljs-keyword">else</span>                        cid = cid * <span class="hljs-number">10</span> + str[j] - <span class="hljs-string">&#x27;0&#x27;</span>;                &#125;                k = <span class="hljs-number">0</span>;                flag = <span class="hljs-number">1</span>;            &#125;        &#125;        <span class="hljs-built_in">strcpy</span>(term, str);        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n%d %d %s\n&quot;</span>, tid, cid, str);        <span class="hljs-built_in">ListAdd</span>(L, tid, cid, str);        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;从文件录入信息录入成功！\n&quot;</span>);        <span class="hljs-built_in">fclose</span>(p);<span class="hljs-comment">//关闭文件</span><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;按任意键返回上一级&quot;</span>);<span class="hljs-built_in">getch</span>();<span class="hljs-keyword">goto</span> begin;&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (decide == <span class="hljs-number">2</span>) &#123;<span class="hljs-comment">//2.授课信息录入</span><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;cls&quot;</span>);<span class="hljs-built_in">InfoInput</span>(L);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;按任意键返回上一级&quot;</span>);<span class="hljs-built_in">getch</span>();<span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;cls&quot;</span>);<span class="hljs-keyword">goto</span> begin;&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (decide == <span class="hljs-number">3</span>) &#123;<span class="hljs-comment">//3.授课信息删除</span><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;cls&quot;</span>);<span class="hljs-built_in">InfoDelete</span>(L);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;按任意键返回上一级&quot;</span>);<span class="hljs-built_in">getch</span>();<span class="hljs-keyword">goto</span> begin;&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (decide == <span class="hljs-number">4</span>) &#123;<span class="hljs-comment">//4.授课教师修改</span><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;cls&quot;</span>);<span class="hljs-built_in">InfoAlter</span>(L);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;按任意键返回上一级&quot;</span>);<span class="hljs-built_in">getch</span>();<span class="hljs-keyword">goto</span> begin;&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (decide == <span class="hljs-number">5</span>) &#123;<span class="hljs-comment">//5.工作量计算</span><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;cls&quot;</span>);<span class="hljs-type">int</span> id;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入教师编号:\n&quot;</span>);<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;id);<span class="hljs-built_in">WorkCalcul</span>(L, id);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;按任意键返回上一级&quot;</span>);<span class="hljs-built_in">getch</span>();<span class="hljs-keyword">goto</span> begin;&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (decide == <span class="hljs-number">6</span>) &#123;<span class="hljs-comment">//6.查询授课历史</span><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;cls&quot;</span>);<span class="hljs-built_in">InfoShow</span>(L);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;按任意键返回上一级&quot;</span>);<span class="hljs-built_in">getch</span>();<span class="hljs-keyword">goto</span> begin;&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (decide == <span class="hljs-number">7</span>) &#123;<span class="hljs-comment">//7.授课信息导出到文件</span><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;cls&quot;</span>);FILE* f;f = <span class="hljs-built_in">fopen</span>(<span class="hljs-string">&quot;D:\\info.txt&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>);<span class="hljs-comment">//导入文件路径</span><span class="hljs-keyword">if</span> (f != <span class="hljs-literal">NULL</span>)&#123;LinkList p, q;p = L-&gt;next;<span class="hljs-built_in">fputs</span>(<span class="hljs-string">&quot;教师授课信息:\n&quot;</span>, f);<span class="hljs-keyword">while</span> (p) &#123;<span class="hljs-built_in">fprintf</span>(f, <span class="hljs-string">&quot;%d %d %s\n&quot;</span>, p-&gt;cId, p-&gt;tId, p-&gt;term);p = p-&gt;next;&#125;<span class="hljs-built_in">fclose</span>(f);f = <span class="hljs-literal">NULL</span>;&#125;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;授课信息已导出到文件D:\\info.txt\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;按任意键返回上一级&quot;</span>);<span class="hljs-built_in">getch</span>();<span class="hljs-keyword">goto</span> begin;&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (decide == <span class="hljs-number">8</span>) &#123;<span class="hljs-comment">//退出</span><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;cls&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n\n\n\n\n   -------------------------------\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n\n\n\n               Bye~\n\n\n\n\n&quot;</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;   -------------------------------\n\n\n\n\n\n&quot;</span>);&#125;&#125;<span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-built_in">InitTeacherInfo</span>();<span class="hljs-comment">//教师信息初始化</span><span class="hljs-built_in">InitCourseInfo</span>();<span class="hljs-comment">//课程信息初始化</span><span class="hljs-built_in">run</span>();<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> list </tag>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>链表的实现</title>
      <link href="/2022/11/14/%E9%93%BE%E8%A1%A8%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
      <url>/2022/11/14/%E9%93%BE%E8%A1%A8%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h1><span id="链表">链表</span></h1> <pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;malloc.h&gt;</span></span><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> &#123;</span><span class="hljs-type">int</span> data;<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span>* <span class="hljs-title">next</span>;</span>&#125;Node, * LinkList;<span class="hljs-comment">//头节点创建</span><span class="hljs-type">void</span> <span class="hljs-title function_">CreateListHead</span><span class="hljs-params">(LinkList &amp;L)</span> &#123;<span class="hljs-type">int</span> i;L = (LinkList)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(Node));L-&gt;next = <span class="hljs-literal">NULL</span>;&#125;<span class="hljs-comment">//节点增加</span><span class="hljs-type">void</span> <span class="hljs-title function_">ListAdd</span><span class="hljs-params">(LinkList L, <span class="hljs-type">int</span> n)</span> &#123;<span class="hljs-type">int</span> j;LinkList p, s;p = L;<span class="hljs-keyword">while</span> (p-&gt;next) &#123;p = p-&gt;next;&#125;s = (LinkList)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(Node));s-&gt;data = n;p-&gt;next = s;s-&gt;next = <span class="hljs-literal">NULL</span>;&#125;<span class="hljs-comment">//在第i个节点位置之前插入新的数据元素n,L的长度加1</span><span class="hljs-type">int</span> <span class="hljs-title function_">ListInsert</span><span class="hljs-params">(LinkList L, <span class="hljs-type">int</span> i, <span class="hljs-type">int</span> n)</span> &#123;<span class="hljs-type">int</span> j;LinkList p, s;p = L;j = <span class="hljs-number">1</span>;<span class="hljs-keyword">while</span> (p &amp;&amp; j &lt; i) &#123;p = p-&gt;next;j++;&#125;<span class="hljs-keyword">if</span> (!p || j &gt; i) &#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;error,the node is not exist.&quot;</span>);<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;s = (LinkList)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(Node));s-&gt;data = n;s-&gt;next = p-&gt;next;p-&gt;next = s;<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;&#125;<span class="hljs-comment">//删除第i个节点</span><span class="hljs-type">int</span> <span class="hljs-title function_">ListDelete</span><span class="hljs-params">(LinkList L, <span class="hljs-type">int</span> i)</span> &#123;<span class="hljs-type">int</span> j;LinkList p, q;p = L;j = <span class="hljs-number">1</span>;<span class="hljs-keyword">while</span> (p-&gt;next &amp;&amp; j &lt; i) &#123;p = p-&gt;next;j++;&#125;<span class="hljs-keyword">if</span> (!(p-&gt;next) || j &gt; i) &#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;error&quot;</span>);<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;q = p-&gt;next;p-&gt;next = q-&gt;next;<span class="hljs-built_in">free</span>(q);<span class="hljs-comment">//回收资源</span><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;&#125;<span class="hljs-comment">//整表删除</span><span class="hljs-type">int</span> <span class="hljs-title function_">ClearList</span><span class="hljs-params">(LinkList L)</span> &#123;LinkList p, q;p = L-&gt;next;<span class="hljs-comment">/*指向第一个节点*/</span><span class="hljs-keyword">while</span> (p) &#123;q = p-&gt;next;<span class="hljs-built_in">free</span>(p);p = q;&#125;L-&gt;next = <span class="hljs-literal">NULL</span>;<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;&#125;<span class="hljs-comment">//遍历</span><span class="hljs-type">void</span> <span class="hljs-title function_">TraverseList</span><span class="hljs-params">(LinkList L)</span> &#123;LinkList p, q;p = L-&gt;next;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;list: &quot;</span>);<span class="hljs-keyword">while</span> (p) &#123;<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, p-&gt;data);p = p-&gt;next;&#125;&#125;<span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;LinkList l;<span class="hljs-comment">//创建</span>CreateListHead(l);ListAdd(l, <span class="hljs-number">1</span>);ListAdd(l, <span class="hljs-number">2</span>);ListAdd(l, <span class="hljs-number">3</span>);ListAdd(l, <span class="hljs-number">4</span>);ListAdd(l, <span class="hljs-number">5</span>);<span class="hljs-comment">//遍历</span>TraverseList(l);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<span class="hljs-comment">//插入</span>ListInsert(l, <span class="hljs-number">3</span>, <span class="hljs-number">8</span>);TraverseList(l);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<span class="hljs-comment">//删除</span>ListDelete(l,<span class="hljs-number">4</span>);TraverseList(l);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<span class="hljs-comment">//整表删除</span>ClearList(l);TraverseList(l);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> c </tag>
            
            <tag> list </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World!</title>
      <link href="/2022/09/26/Hello-World/"/>
      <url>/2022/09/26/Hello-World/</url>
      
        <content type="html"><![CDATA[<p><img src="/2022/09/26/Hello-World/20241012-150737.jpg" alt="20241012-150737"></p><p>今天搭建好了博客</p><hr>]]></content>
      
      
      
        <tags>
            
            <tag> daily </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>毕业设计题目的分配</title>
      <link href="/2021/10/30/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1%E9%A2%98%E7%9B%AE%E7%9A%84%E5%88%86%E9%85%8D/"/>
      <url>/2021/10/30/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1%E9%A2%98%E7%9B%AE%E7%9A%84%E5%88%86%E9%85%8D/</url>
      
        <content type="html"><![CDATA[<p><img src="/2021/10/30/%E6%AF%95%E4%B8%9A%E8%AE%BE%E8%AE%A1%E9%A2%98%E7%9B%AE%E7%9A%84%E5%88%86%E9%85%8D/output2.jpg" alt="output2"></p><p>以此博客记录大二上学期我的一次java作业</p><blockquote><h2><span id="毕业设计题目的分配">毕业设计题目的分配</span></h2><p>毕业设计分配过程如下： </p><ol><li>指导教师出题目； </li><li>学生选择。 学生选择时常常会有两种目标： 选择自己感兴趣的题目；选择自己感兴趣的教师。 </li><li>若教授可以带5名学生，副教授带4名学生，讲师带3名学生，请编写程序，完成毕业设计分配，让学生以选择导师或题目的形式灵活分配。</li></ol><p>ps: 为了降低难度，假设题目的数量和学生的数量刚好相等。<br>尽你所学对程序功能进行完善，可不局限于题目基本要求。 请考虑面向对象思想，设计几个类，类中包含何种数据、何种方法。</p></blockquote><p>在前面改了很多次后面java老师又加了很多要求…</p><blockquote><h4><span id="题目要求重新整理">题目要求重新整理</span></h4><p>1.首先一个教师出多道题,题数根据教师等级决定,并且题目数量要可以更改,程序灵活性要体现<br>2.一个学生只能选一道题选过以后其他学生不能再选,当题目已被选过时要有提示<br>3.为了方便学生选题,在选择时要把题目是否已被选过显示出来<br>4.教师要能够对学生成绩评判,学生成绩要能显示出来<br>5.学生选的题目要可更换<br>6.毕业设计题目分配的展示</p></blockquote><h2><span id="学生类">学生类</span></h2><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Students</span> &#123;<span class="hljs-keyword">protected</span> <span class="hljs-type">int</span> num;<span class="hljs-comment">//学号</span><span class="hljs-keyword">protected</span> <span class="hljs-type">int</span> score;<span class="hljs-comment">//得分</span><span class="hljs-keyword">protected</span> String name;<span class="hljs-comment">//姓名</span><span class="hljs-keyword">protected</span> String sex;<span class="hljs-comment">//性别</span><span class="hljs-keyword">protected</span> String teacher;<span class="hljs-comment">//学生选择的题目的出题教师</span><span class="hljs-keyword">protected</span> String que;<span class="hljs-comment">//选择的题目</span><span class="hljs-keyword">public</span> <span class="hljs-title function_">Students</span> <span class="hljs-params">()</span>&#123;&#125;<span class="hljs-keyword">public</span> <span class="hljs-title function_">Students</span><span class="hljs-params">(String name,String sex,<span class="hljs-type">int</span> num,String teacher,String que)</span>&#123;<span class="hljs-comment">//构造方法中初始化</span><span class="hljs-built_in">this</span>.name = name;<span class="hljs-built_in">this</span>.sex = sex;<span class="hljs-built_in">this</span>.num = num;<span class="hljs-built_in">this</span>.teacher = teacher;<span class="hljs-built_in">this</span>.que = que;&#125;<span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span>&#123;<span class="hljs-built_in">this</span>.name = name;&#125;<span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSex</span><span class="hljs-params">(String sex)</span>&#123;<span class="hljs-built_in">this</span>.sex = sex;&#125;<span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setNum</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span>&#123;<span class="hljs-built_in">this</span>.num = a;&#125;<span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setTeacher</span><span class="hljs-params">(String a)</span>&#123;<span class="hljs-built_in">this</span>.teacher = a;&#125;<span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setQuestion</span><span class="hljs-params">(String a)</span>&#123;<span class="hljs-built_in">this</span>.que = a;&#125;<span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setScore</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span>&#123;<span class="hljs-built_in">this</span>.score = a;&#125;<span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span>&#123;<span class="hljs-keyword">return</span> name;&#125;<span class="hljs-keyword">public</span> String <span class="hljs-title function_">getSex</span><span class="hljs-params">()</span>&#123;<span class="hljs-keyword">return</span> sex;&#125;<span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getNum</span><span class="hljs-params">()</span>&#123;<span class="hljs-keyword">return</span> num;&#125;<span class="hljs-keyword">public</span> String <span class="hljs-title function_">getTeacher</span><span class="hljs-params">()</span>&#123;<span class="hljs-keyword">return</span> teacher;&#125;<span class="hljs-keyword">public</span> String <span class="hljs-title function_">getQuesion</span><span class="hljs-params">()</span>&#123;<span class="hljs-keyword">return</span> que;&#125;<span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getScore</span><span class="hljs-params">()</span>&#123;<span class="hljs-keyword">return</span> score;&#125;<span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span> &#123;<span class="hljs-comment">//学生信息打印</span>System.out.println(<span class="hljs-string">&quot;姓名: &quot;</span>+name+<span class="hljs-string">&quot;; 性别: &quot;</span>+sex+<span class="hljs-string">&quot;; 学号: &quot;</span>+num+<span class="hljs-string">&quot;; 指导教师: &quot;</span>+teacher+<span class="hljs-string">&quot;; 题目: &quot;</span>+que+<span class="hljs-string">&quot;;&quot;</span>);&#125;&#125;</code></pre><h2><span id="教师类">教师类</span></h2><p>教师类复杂些,因为学生选题时 题目是否已经选过的功能实现在教师类中完成了<br>这里我添加了索引变量dex来记录选择该教师的学生,stnums是教师出题数目,这样当dex&lt;stnums时,学生可选择该教师,否则不行,教师出的题目使用字符串型数组来储存<br>这里最难理解的是a数组和b数组</p><h5><span id="a数组">a数组</span></h5><p>由于学生选题后,要实现毕业设计题目的分配,因此在分配时会首先显示教师信息,对应显示选择该教师的题目的学生,由a数组记录选择该教师的学生的编号(一个编号要对应一个学生),这样方便信息展出</p><h5><span id="b数组">b数组</span></h5><p>当学生选择题目标准来选题时,判断该题目是否被选用b数组来记录,即0未选&#x2F;1已选,b中数据与question相对应<br>如:question[1]被选,则b[1]&#x3D;1,question[4]未被选,则b[4]&#x3D;0,</p><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Teachers</span> &#123;<span class="hljs-comment">//教师类</span><span class="hljs-keyword">protected</span> String name;<span class="hljs-comment">//姓名</span><span class="hljs-keyword">protected</span> String level;<span class="hljs-comment">//职务</span><span class="hljs-keyword">protected</span> <span class="hljs-type">int</span> <span class="hljs-variable">stnums</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<span class="hljs-comment">//出题数</span><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-variable">dex</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<span class="hljs-comment">//已选学生数</span><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> a[] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">10</span>];<span class="hljs-comment">//记选课学生编号数组</span><span class="hljs-keyword">public</span> String[] question = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[<span class="hljs-number">5</span>]; <span class="hljs-comment">//开设的题目</span><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> b[] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">10</span>];<span class="hljs-comment">//记录题目是否被选，0未选/1已选</span><span class="hljs-keyword">public</span> <span class="hljs-title function_">Teachers</span><span class="hljs-params">()</span>&#123;&#125;<span class="hljs-keyword">public</span> <span class="hljs-title function_">Teachers</span><span class="hljs-params">(String name,String level,<span class="hljs-type">int</span> stnums)</span>&#123;<span class="hljs-comment">//初始化构造方法</span><span class="hljs-built_in">this</span>.name = name;<span class="hljs-built_in">this</span>.level = level;<span class="hljs-built_in">this</span>.stnums = stnums;&#125;<span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span>&#123;<span class="hljs-built_in">this</span>.name = name;&#125;<span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setlevel</span><span class="hljs-params">(String level)</span>&#123;<span class="hljs-built_in">this</span>.level = level;&#125;<span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setnum</span><span class="hljs-params">(<span class="hljs-type">int</span> stnums)</span>&#123;<span class="hljs-built_in">this</span>.stnums = stnums;&#125;<span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span>&#123;<span class="hljs-keyword">return</span> name;&#125;<span class="hljs-keyword">public</span> String <span class="hljs-title function_">getlevel</span><span class="hljs-params">()</span>&#123;<span class="hljs-keyword">return</span> level;&#125;<span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getnum</span><span class="hljs-params">()</span>&#123;<span class="hljs-keyword">return</span> stnums;&#125;<span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span> &#123;<span class="hljs-comment">//教师信息打印</span>System.out.println(<span class="hljs-string">&quot;姓名: &quot;</span>+name+<span class="hljs-string">&quot;; 职务: &quot;</span>+level+<span class="hljs-string">&quot;; 开设题目: &quot;</span>);<span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i &lt; stnums;i++) &#123;System.out.println(question[i]);&#125;&#125;<span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showplus</span><span class="hljs-params">()</span> &#123;<span class="hljs-comment">//教师姓名职务打印</span>System.out.println(<span class="hljs-string">&quot;姓名: &quot;</span>+name+<span class="hljs-string">&quot;; 职务: &quot;</span>+level);&#125;&#125;</code></pre><h2><span id="清屏类">清屏类</span></h2><p>该类的作用不大,而且使用受限,只有鼠标在命令框中才能实现,它的功能类似C语言的system(“cls”);只是为了程序运行的观赏性添加的,可以去掉</p><p>注释:该类是我从另一个博主那学来的,这里有他的博客链接,尊重版权<br><a href="https://blog.csdn.net/qq_18144681/article/details/51222405?utm_source=app&app_version=4.15.0&code=app_1562916241&uLinkId=usr1mkqgl919blen">https://blog.csdn.net/qq_18144681/article/details/51222405?utm_source=app&amp;app_version=4.15.0&amp;code=app_1562916241&amp;uLinkId=usr1mkqgl919blen</a></p><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.awt.AWTException;<span class="hljs-keyword">import</span> java.awt.Robot;<span class="hljs-keyword">import</span> java.awt.event.InputEvent;<span class="hljs-keyword">import</span> java.awt.event.KeyEvent;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Clear</span> &#123;<span class="hljs-comment">//清屏程序 用于更新页面</span><span class="hljs-keyword">public</span> <span class="hljs-title function_">Clear</span><span class="hljs-params">()</span> &#123;&#125;<span class="hljs-meta">@SuppressWarnings(&quot;deprecation&quot;)</span><span class="hljs-comment">//去除警告(不重要,不加也没事,只是笔者是强迫症,看着黄标警告烦)</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">clear</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> AWTException    &#123;        <span class="hljs-type">Robot</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Robot</span>();        r.mousePress(InputEvent.BUTTON3_MASK);       <span class="hljs-comment">// 按下鼠标右键</span>        r.mouseRelease(InputEvent.BUTTON3_MASK);    <span class="hljs-comment">// 释放鼠标右键</span>        r.keyPress(KeyEvent.VK_CONTROL);             <span class="hljs-comment">// 按下Ctrl键</span>        r.keyPress(KeyEvent.VK_R);                    <span class="hljs-comment">// 按下R键</span>        r.keyRelease(KeyEvent.VK_R);                  <span class="hljs-comment">// 释放R键</span>        r.keyRelease(KeyEvent.VK_CONTROL);            <span class="hljs-comment">// 释放Ctrl键</span>        r.delay(<span class="hljs-number">100</span>);           &#125;&#125;</code></pre><h2><span id="main类">main类</span></h2><p>这里我将菜单中的每一个功能都用一个方法来实现</p><pre><code class="hljs java"><span class="hljs-keyword">package</span> MainPackage;<span class="hljs-keyword">import</span> java.awt.AWTException;<span class="hljs-keyword">import</span> java.util.Scanner;<span class="hljs-comment">//！！！本程序作者： YYDS 的张缙豪大神！！！</span><span class="hljs-comment">//@敲代码的猫</span><span class="hljs-comment">//----------------------------------------------------------------------------------------</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainClass</span> &#123;<span class="hljs-comment">//----------------------------------------------------------------------------------------</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">teaShow</span><span class="hljs-params">(<span class="hljs-type">int</span> n, Teachers[] tea, <span class="hljs-type">int</span> teaNum)</span> &#123;<span class="hljs-comment">// 指导教师信息</span><span class="hljs-comment">// TODO teaShow</span><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;System.out.print((i + <span class="hljs-number">1</span>) + <span class="hljs-string">&quot;: &quot;</span>);<span class="hljs-comment">// 教师编号</span>tea[i].show();&#125;&#125;<span class="hljs-comment">//----------------------------------------------------------------------------------------</span><span class="hljs-meta">@SuppressWarnings(&quot;static-access&quot;)</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">teaAdd</span><span class="hljs-params">(<span class="hljs-type">int</span> teaNum, Teachers[] tea, <span class="hljs-type">int</span> at)</span> <span class="hljs-keyword">throws</span> AWTException &#123;<span class="hljs-comment">// 指导教师信息添加</span><span class="hljs-comment">// TODO teaAdd</span><span class="hljs-meta">@SuppressWarnings(&quot;resource&quot;)</span><span class="hljs-type">Scanner</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<span class="hljs-type">Clear</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Clear</span>();String str1, str2, s;<span class="hljs-type">int</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;System.out.println(<span class="hljs-string">&quot;请完善指导教师信息：&quot;</span>);<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= teaNum; i++) &#123;<span class="hljs-comment">// 教师信息初始化</span>r.clear();tea[i + at - teaNum - <span class="hljs-number">1</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Teachers</span>();System.out.println(<span class="hljs-string">&quot;第&quot;</span> + i + <span class="hljs-string">&quot;条信息&quot;</span>);System.out.println(<span class="hljs-string">&quot;请输入指导教师姓名：&quot;</span>);str1 = input.next();tea[i + at - teaNum - <span class="hljs-number">1</span>].setName(str1);<span class="hljs-comment">// at - teaNum为已添加教师数</span><span class="hljs-keyword">do</span> &#123;<span class="hljs-comment">// 通过do-while解决输入错误后重新输入问题</span>flag = <span class="hljs-number">250</span>;System.out.println(<span class="hljs-string">&quot;请输入指导教师职务：(教授/副教授/讲师)&quot;</span>);str2 = input.next();tea[i + at - teaNum - <span class="hljs-number">1</span>].setlevel(str2);<span class="hljs-keyword">if</span> (str2.equals(<span class="hljs-string">&quot;教授&quot;</span>)) &#123;<span class="hljs-comment">// 教师带学生人数初始化</span>flag = <span class="hljs-number">1</span>;&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (str2.equals(<span class="hljs-string">&quot;副教授&quot;</span>)) &#123;flag = <span class="hljs-number">2</span>;&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (str2.equals(<span class="hljs-string">&quot;讲师&quot;</span>)) &#123;flag = <span class="hljs-number">3</span>;&#125; <span class="hljs-keyword">else</span> &#123;System.out.println(<span class="hljs-string">&quot;输入错误，请重新输入！&quot;</span>);flag = <span class="hljs-number">250</span>;&#125;&#125; <span class="hljs-keyword">while</span> (flag == <span class="hljs-number">250</span>);<span class="hljs-keyword">if</span> (flag == <span class="hljs-number">1</span>) &#123;<span class="hljs-comment">// 设置教师出题数目</span>tea[i + at - teaNum - <span class="hljs-number">1</span>].setnum(<span class="hljs-number">5</span>);&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (flag == <span class="hljs-number">2</span>) &#123;tea[i + at - teaNum - <span class="hljs-number">1</span>].setnum(<span class="hljs-number">4</span>);&#125; <span class="hljs-keyword">else</span> &#123;tea[i + at - teaNum - <span class="hljs-number">1</span>].setnum(<span class="hljs-number">3</span>);&#125;<span class="hljs-comment">// ----------------------------</span>System.out.println(<span class="hljs-string">&quot;是否对教师出题数目进行更改？(Y/N)&quot;</span>);<span class="hljs-comment">// 教师开设题目初始化</span>s = input.next();<span class="hljs-keyword">if</span> (s.charAt(<span class="hljs-number">0</span>) == <span class="hljs-string">&#x27;Y&#x27;</span> || s.charAt(<span class="hljs-number">0</span>) == <span class="hljs-string">&#x27;y&#x27;</span>) &#123;dexchange(tea, at);&#125; <span class="hljs-keyword">else</span> &#123;System.out.println(<span class="hljs-string">&quot;教师出题：&quot;</span>);<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; tea[i + at - teaNum - <span class="hljs-number">1</span>].getnum(); j++) &#123;System.out.println(<span class="hljs-string">&quot;请输入第&quot;</span> + (j + <span class="hljs-number">1</span>) + <span class="hljs-string">&quot;题：&quot;</span>);tea[i + at - teaNum - <span class="hljs-number">1</span>].question[j] = input.next();&#125;&#125;&#125;&#125;<span class="hljs-comment">//----------------------------------------------------------------------------------------</span><span class="hljs-meta">@SuppressWarnings(&quot;static-access&quot;)</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">stuAdd</span><span class="hljs-params">(<span class="hljs-type">int</span> n, <span class="hljs-type">int</span> stunum, Teachers[] tea, <span class="hljs-type">int</span> at, Students[] stu)</span> <span class="hljs-keyword">throws</span> AWTException &#123;<span class="hljs-comment">// 学生信息添加</span><span class="hljs-comment">// TODO stuAdd</span>String str01, str02, str03, str04 = <span class="hljs-string">&quot;&quot;</span>, tta = <span class="hljs-string">&quot;教师&quot;</span>, pro = <span class="hljs-string">&quot;题目&quot;</span>, str = <span class="hljs-string">&quot;&quot;</span>;<span class="hljs-meta">@SuppressWarnings(&quot;resource&quot;)</span><span class="hljs-type">Scanner</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<span class="hljs-type">Clear</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Clear</span>();<span class="hljs-type">int</span> num, flag = <span class="hljs-number">0</span>, f = <span class="hljs-number">0</span>, f1 = <span class="hljs-number">0</span>, kong = <span class="hljs-number">0</span>, kong1 = <span class="hljs-number">0</span>;<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> stunum - n; i &lt; stunum; i++) &#123;r.clear();System.out.println(<span class="hljs-string">&quot;第&quot;</span> + (i + <span class="hljs-number">1</span>) + <span class="hljs-string">&quot;名学生：&quot;</span>);stu[i] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Students</span>();<span class="hljs-comment">//</span>System.out.println(<span class="hljs-string">&quot;请输入学生姓名：&quot;</span>);str01 = input.next();stu[i].setName(str01);System.out.println(<span class="hljs-string">&quot;请输入学生性别：（男/女）&quot;</span>);str02 = input.next();stu[i].setSex(str02);System.out.println(<span class="hljs-string">&quot;请输入学生学号：&quot;</span>);num = input.nextInt();stu[i].setNum(num);<span class="hljs-comment">// -----------------------------------------------------------学生选题部分</span>System.out.println(<span class="hljs-string">&quot;请输入学生选课标准：(教师/题目)&quot;</span>);<span class="hljs-comment">// 根据学生选题标准进行分配</span><span class="hljs-keyword">do</span> &#123;f = <span class="hljs-number">0</span>;str03 = input.next();<span class="hljs-keyword">if</span> (str03.equals(<span class="hljs-string">&quot;题目&quot;</span>) || str03.equals(<span class="hljs-string">&quot;教师&quot;</span>)) &#123;f = <span class="hljs-number">1</span>;&#125; <span class="hljs-keyword">else</span> &#123;System.out.println(<span class="hljs-string">&quot;输入错误，请重新输入：&quot;</span>);&#125;&#125; <span class="hljs-keyword">while</span> (f == <span class="hljs-number">0</span>);<span class="hljs-keyword">if</span> (str03.equals(tta)) &#123;<span class="hljs-comment">// str03 --&gt; 教师/题目</span>System.out.println(<span class="hljs-string">&quot;请输入学生喜欢的指导教师：&quot;</span>);<span class="hljs-keyword">do</span> &#123;f1 = <span class="hljs-number">0</span>;<span class="hljs-comment">// 判断教师带学生人数是否已满</span>kong = <span class="hljs-number">0</span>;str04 = input.next();<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; at; j++) &#123;<span class="hljs-keyword">if</span> (tea[j].getName().equals(str04)) &#123;<span class="hljs-comment">// str04--&gt;教师姓名</span>kong = <span class="hljs-number">1</span>;<span class="hljs-comment">// 确实是否有该教师姓名</span><span class="hljs-keyword">if</span> (tea[j].dex == tea[j].stnums) &#123;f1 = <span class="hljs-number">0</span>;System.out.println(<span class="hljs-string">&quot;该教师课题人数已满，请重新选择：&quot;</span>);&#125; <span class="hljs-keyword">else</span> &#123;f1 = <span class="hljs-number">1</span>;str = str04;stu[i].setTeacher(str);System.out.println(<span class="hljs-string">&quot;该教师开设了如下课程：&quot;</span>);<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; k &lt; tea[j].stnums; k++) &#123;System.out.print(tea[j].question[k] + <span class="hljs-string">&quot;  &quot;</span>);<span class="hljs-keyword">if</span> (tea[j].b[k] == <span class="hljs-number">1</span>) &#123;showR();&#125; <span class="hljs-keyword">else</span> &#123;showN();&#125;&#125;System.out.println(<span class="hljs-string">&quot;请选择：&quot;</span>);<span class="hljs-keyword">do</span> &#123;flag = <span class="hljs-number">0</span>;<span class="hljs-comment">// 判断输入合法性</span>kong1 = <span class="hljs-number">0</span>;<span class="hljs-comment">// 判断人满</span>str04 = input.next();<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; k &lt; tea[j].stnums; k++) &#123;<span class="hljs-keyword">if</span> (tea[j].question[k].equals(str04)) &#123;kong1 = <span class="hljs-number">1</span>;<span class="hljs-keyword">if</span> (tea[j].b[k] == <span class="hljs-number">0</span>) &#123;stu[i].setQuestion(str04);tea[j].b[k] = <span class="hljs-number">1</span>;tea[j].a[tea[j].dex] = i;tea[j].dex++;flag = <span class="hljs-number">1</span>;<span class="hljs-keyword">break</span>;&#125; <span class="hljs-keyword">else</span> &#123;flag = <span class="hljs-number">0</span>;&#125;&#125;<span class="hljs-keyword">if</span> (flag == <span class="hljs-number">1</span>)<span class="hljs-keyword">break</span>;&#125;<span class="hljs-keyword">if</span> (flag == <span class="hljs-number">0</span> &amp;&amp; kong1 == <span class="hljs-number">1</span>) &#123;System.out.println(<span class="hljs-string">&quot;该选题人数已满，请重新选择：&quot;</span>);&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (flag == <span class="hljs-number">0</span> &amp;&amp; kong1 == <span class="hljs-number">0</span>) &#123;System.out.println(<span class="hljs-string">&quot;无此题目，请重新输入：&quot;</span>);&#125;&#125; <span class="hljs-keyword">while</span> (flag == <span class="hljs-number">0</span>);&#125;&#125;&#125;<span class="hljs-keyword">if</span> (kong == <span class="hljs-number">0</span>) &#123;System.out.println(<span class="hljs-string">&quot;查无此人，请重新输入：&quot;</span>);&#125;&#125; <span class="hljs-keyword">while</span> (f1 == <span class="hljs-number">0</span>);&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (str03.equals(pro)) &#123;System.out.println(<span class="hljs-string">&quot;所有题目展示：&quot;</span>);queshow(tea, at);System.out.println(<span class="hljs-string">&quot;请输入感兴趣的题目：&quot;</span>);<span class="hljs-keyword">do</span> &#123;flag = <span class="hljs-number">0</span>;kong = <span class="hljs-number">0</span>;str04 = input.next();<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; at; j++) &#123;<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; k &lt; tea[j].getnum(); k++) &#123;<span class="hljs-keyword">if</span> (tea[j].question[k].equals(str04)) &#123;kong = <span class="hljs-number">1</span>;<span class="hljs-comment">// 找到题目标记</span><span class="hljs-keyword">if</span> (tea[j].b[k] == <span class="hljs-number">0</span>) &#123;tea[j].b[k] = <span class="hljs-number">1</span>;tea[j].a[tea[j].dex] = i;tea[j].dex++;flag = <span class="hljs-number">1</span>;str = tea[j].getName();stu[i].setTeacher(str);stu[i].setQuestion(str04);<span class="hljs-keyword">break</span>;&#125; <span class="hljs-keyword">else</span> &#123;flag = <span class="hljs-number">0</span>;<span class="hljs-keyword">break</span>;&#125;&#125;&#125;<span class="hljs-keyword">if</span> (flag == <span class="hljs-number">1</span>)<span class="hljs-keyword">break</span>;&#125;<span class="hljs-keyword">if</span> (flag == <span class="hljs-number">0</span> &amp;&amp; kong == <span class="hljs-number">1</span>) &#123;System.out.println(<span class="hljs-string">&quot;该选题已被选，请重新选择：&quot;</span>);&#125;<span class="hljs-keyword">if</span> (flag == <span class="hljs-number">0</span> &amp;&amp; kong == <span class="hljs-number">0</span>) &#123;System.out.println(<span class="hljs-string">&quot;查无此题，请重新输入：&quot;</span>);&#125;&#125; <span class="hljs-keyword">while</span> (flag == <span class="hljs-number">0</span>);&#125;&#125;&#125;<span class="hljs-comment">//----------------------------------------------------------------------------------------</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">stuShow</span><span class="hljs-params">(<span class="hljs-type">int</span> stunum, Students[] stu)</span> &#123;<span class="hljs-comment">// 学生信息展示</span><span class="hljs-comment">// TODO stuShow</span><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; stunum; i++) &#123;stu[i].show();&#125;&#125;<span class="hljs-comment">//----------------------------------------------------------------------------------------</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">graShow</span><span class="hljs-params">(Students[] stu, Teachers[] tea, <span class="hljs-type">int</span> at)</span> &#123;<span class="hljs-comment">// 毕业设计分配展示</span><span class="hljs-comment">// TODO graShow</span><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; at; i++) &#123;tea[i].showplus();System.out.println(<span class="hljs-string">&quot;所带学生：&quot;</span>);<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; tea[i].dex; j++) &#123;stu[tea[i].a[j]].show();&#125;System.out.println(<span class="hljs-string">&quot;\n\n&quot;</span>);&#125;&#125;<span class="hljs-comment">//----------------------------------------------------------------------------------------</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">stuExchange</span><span class="hljs-params">(<span class="hljs-type">int</span> stunum, Teachers[] tea, <span class="hljs-type">int</span> at, Students[] stu)</span> &#123;<span class="hljs-comment">// 学生更改题目</span><span class="hljs-comment">// TODO stuExchange</span><span class="hljs-comment">// 分为信息录入和信息删除</span>String str03, str04 = <span class="hljs-string">&quot;&quot;</span>, tta = <span class="hljs-string">&quot;教师&quot;</span>, pro = <span class="hljs-string">&quot;题目&quot;</span>, str = <span class="hljs-string">&quot;&quot;</span>, s;<span class="hljs-meta">@SuppressWarnings(&quot;resource&quot;)</span><span class="hljs-type">Scanner</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<span class="hljs-type">int</span> n, dex = <span class="hljs-number">0</span>, flag = <span class="hljs-number">0</span>, kong = <span class="hljs-number">0</span>, kong1 = <span class="hljs-number">0</span>, f = <span class="hljs-number">0</span>, f1 = <span class="hljs-number">0</span>, x = <span class="hljs-number">0</span>;System.out.println(<span class="hljs-string">&quot;请输入学生学号：&quot;</span>);n = input.nextInt();<span class="hljs-comment">// 用于学号对比的中间变量</span>System.out.println(<span class="hljs-string">&quot;该学生信息如下：&quot;</span>);<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; stunum; i++) &#123;<span class="hljs-keyword">if</span> (stu[i].num == n) &#123;stu[i].show();dex = i;System.out.print(<span class="hljs-string">&quot;\n&quot;</span>);&#125;&#125;System.out.println(<span class="hljs-string">&quot;是否更改选题？(Y/N)&quot;</span>);s = input.next();<span class="hljs-keyword">if</span> (s.charAt(<span class="hljs-number">0</span>) == <span class="hljs-string">&#x27;Y&#x27;</span> || s.charAt(<span class="hljs-number">0</span>) == <span class="hljs-string">&#x27;y&#x27;</span>) &#123;<span class="hljs-comment">// 先前信息删除</span><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; at; i++) &#123;<span class="hljs-keyword">if</span> (stu[dex].getTeacher().equals(tea[i].getName())) &#123;tea[i].dex--;<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; tea[i].dex; j++) &#123;<span class="hljs-keyword">if</span> (tea[i].a[j] == dex) &#123;x = <span class="hljs-number">1</span>;&#125;<span class="hljs-keyword">if</span> (x == <span class="hljs-number">1</span>) &#123;tea[i].a[j] = tea[i].a[j + <span class="hljs-number">1</span>];&#125;&#125;<span class="hljs-keyword">break</span>;&#125;&#125;<span class="hljs-comment">// 重新选题后信息录入</span>System.out.println(<span class="hljs-string">&quot;请输入学生选课标准：(教师/题目)&quot;</span>);<span class="hljs-keyword">do</span> &#123;f = <span class="hljs-number">0</span>;str03 = input.next();<span class="hljs-keyword">if</span> (str03.equals(<span class="hljs-string">&quot;题目&quot;</span>) || str03.equals(<span class="hljs-string">&quot;教师&quot;</span>)) &#123;f = <span class="hljs-number">1</span>;&#125; <span class="hljs-keyword">else</span> &#123;System.out.println(<span class="hljs-string">&quot;输入错误，请重新输入：&quot;</span>);&#125;&#125; <span class="hljs-keyword">while</span> (f == <span class="hljs-number">0</span>);<span class="hljs-keyword">if</span> (str03.equals(tta)) &#123;System.out.println(<span class="hljs-string">&quot;请输入学生喜欢的指导教师：&quot;</span>);<span class="hljs-keyword">do</span> &#123;flag = <span class="hljs-number">0</span>;f1 = <span class="hljs-number">0</span>;kong = <span class="hljs-number">0</span>;str04 = input.next();<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; at; j++) &#123;<span class="hljs-keyword">if</span> (tea[j].getName().equals(str04)) &#123;kong = <span class="hljs-number">1</span>;<span class="hljs-comment">// 确实是否有该教师姓名</span><span class="hljs-keyword">if</span> (tea[j].dex == tea[j].stnums) &#123;f1 = <span class="hljs-number">0</span>;System.out.println(<span class="hljs-string">&quot;该教师课题人数已满，请重新选择：&quot;</span>);&#125; <span class="hljs-keyword">else</span> &#123;f1 = <span class="hljs-number">1</span>;str = str04;System.out.println(<span class="hljs-string">&quot;该教师开设了如下课程：&quot;</span>);<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; k &lt; tea[j].stnums; k++) &#123;System.out.println(tea[j].question[k]);&#125;System.out.println(<span class="hljs-string">&quot;请选择：&quot;</span>);<span class="hljs-keyword">do</span> &#123;flag = <span class="hljs-number">0</span>;kong1 = <span class="hljs-number">0</span>;str04 = input.next();<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; k &lt; tea[j].stnums; k++) &#123;<span class="hljs-keyword">if</span> (tea[j].question[k].equals(str04)) &#123;kong1 = <span class="hljs-number">1</span>;<span class="hljs-keyword">if</span> (tea[j].b[k] == <span class="hljs-number">0</span>) &#123;tea[j].b[k] = <span class="hljs-number">1</span>;tea[j].a[tea[j].dex] = dex;tea[j].dex++;flag = <span class="hljs-number">1</span>;<span class="hljs-keyword">break</span>;&#125; <span class="hljs-keyword">else</span> &#123;flag = <span class="hljs-number">0</span>;&#125;&#125;<span class="hljs-keyword">if</span> (flag == <span class="hljs-number">1</span>)<span class="hljs-keyword">break</span>;&#125;<span class="hljs-keyword">if</span> (flag == <span class="hljs-number">0</span> &amp;&amp; kong1 == <span class="hljs-number">1</span>) &#123;System.out.println(<span class="hljs-string">&quot;该选题人数已满，请重新选择：&quot;</span>);&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (flag == <span class="hljs-number">0</span> &amp;&amp; kong1 == <span class="hljs-number">0</span>) &#123;System.out.println(<span class="hljs-string">&quot;无此题目，请重新输入：&quot;</span>);&#125;&#125; <span class="hljs-keyword">while</span> (flag == <span class="hljs-number">0</span>);&#125;&#125;&#125;<span class="hljs-keyword">if</span> (kong == <span class="hljs-number">0</span>) &#123;System.out.println(<span class="hljs-string">&quot;查无此人，请重新输入：&quot;</span>);&#125;&#125; <span class="hljs-keyword">while</span> (f1 == <span class="hljs-number">0</span>);&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (str03.equals(pro)) &#123;System.out.println(<span class="hljs-string">&quot;所有题目展示：&quot;</span>);queshow(tea, at);System.out.println(<span class="hljs-string">&quot;请输入感兴趣的题目：&quot;</span>);<span class="hljs-keyword">do</span> &#123;flag = <span class="hljs-number">0</span>;kong = <span class="hljs-number">0</span>;str04 = input.next();<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; at; j++) &#123;<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; k &lt; tea[j].getnum(); k++) &#123;<span class="hljs-keyword">if</span> (tea[j].question[k].equals(str04)) &#123;kong = <span class="hljs-number">1</span>;<span class="hljs-comment">// 找到题目标记</span><span class="hljs-keyword">if</span> (tea[j].b[k] == <span class="hljs-number">0</span>) &#123;tea[j].b[k] = <span class="hljs-number">1</span>;tea[j].a[tea[j].dex] = dex;tea[j].dex++;flag = <span class="hljs-number">1</span>;str = tea[j].getName();<span class="hljs-keyword">break</span>;&#125; <span class="hljs-keyword">else</span> &#123;flag = <span class="hljs-number">0</span>;<span class="hljs-keyword">break</span>;&#125;&#125;&#125;<span class="hljs-keyword">if</span> (flag == <span class="hljs-number">1</span>)<span class="hljs-keyword">break</span>;&#125;<span class="hljs-keyword">if</span> (flag == <span class="hljs-number">0</span> &amp;&amp; kong == <span class="hljs-number">1</span>) &#123;System.out.println(<span class="hljs-string">&quot;该选题已被选，请重新选择：&quot;</span>);&#125;<span class="hljs-keyword">if</span> (flag == <span class="hljs-number">0</span> &amp;&amp; kong == <span class="hljs-number">0</span>) &#123;System.out.println(<span class="hljs-string">&quot;查无此题，请重新输入：&quot;</span>);&#125;&#125; <span class="hljs-keyword">while</span> (flag == <span class="hljs-number">0</span>);&#125;stu[dex].setQuestion(str04);stu[dex].setTeacher(str);&#125;&#125;<span class="hljs-comment">//----------------------------------------------------------------------------------------</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">juDge</span><span class="hljs-params">(Students[] stu, Teachers[] tea, <span class="hljs-type">int</span> at)</span> &#123;<span class="hljs-comment">// 成绩评判</span><span class="hljs-comment">// TODO judge</span><span class="hljs-meta">@SuppressWarnings(&quot;resource&quot;)</span><span class="hljs-type">Scanner</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<span class="hljs-type">int</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;System.out.println(<span class="hljs-string">&quot;请输入指导教师姓名:&quot;</span>);<span class="hljs-keyword">do</span> &#123;<span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> input.next();<span class="hljs-type">int</span> n;<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; at; i++) &#123;<span class="hljs-keyword">if</span> (tea[i].getName().equals(s)) &#123;flag = <span class="hljs-number">1</span>;System.out.println(<span class="hljs-string">&quot;请为学生打分:&quot;</span>);<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; tea[i].dex; j++) &#123;System.out.println(<span class="hljs-string">&quot;第&quot;</span> + (j + <span class="hljs-number">1</span>) + <span class="hljs-string">&quot;名学生： &quot;</span>);stu[tea[i].a[j]].show();System.out.println(<span class="hljs-string">&quot;该生选题为： &quot;</span>);System.out.print(stu[tea[i].a[j]].getQuesion());System.out.println(<span class="hljs-string">&quot;该学生的成绩为：&quot;</span>);n = input.nextInt();stu[tea[i].a[j]].setScore(n);&#125;&#125;&#125;<span class="hljs-keyword">if</span> (flag == <span class="hljs-number">0</span>) &#123;System.out.println(<span class="hljs-string">&quot;查无此人请重新输入:&quot;</span>);&#125;&#125; <span class="hljs-keyword">while</span> (flag == <span class="hljs-number">0</span>);&#125;<span class="hljs-comment">//----------------------------------------------------------------------------------------</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">scoShow</span><span class="hljs-params">(Students[] stu, Teachers[] tea, <span class="hljs-type">int</span> at)</span> &#123;<span class="hljs-comment">// 成绩显示</span><span class="hljs-comment">// TODO judge</span><span class="hljs-meta">@SuppressWarnings(&quot;resource&quot;)</span><span class="hljs-type">Scanner</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);System.out.println(<span class="hljs-string">&quot;请输入指导教师姓名:&quot;</span>);<span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> input.next();<span class="hljs-type">Students</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Students</span>();<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; at; i++) &#123;<span class="hljs-keyword">if</span> (tea[i].getName().equals(s)) &#123;System.out.print(<span class="hljs-string">&quot;该指导教师开设的毕业设计题目为： &quot;</span>);<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; tea[i].getnum(); j++) &#123;System.out.println(tea[i].question[j]);&#125;System.out.print(<span class="hljs-string">&quot;\n&quot;</span>);System.out.println(<span class="hljs-string">&quot;学生成绩如下： &quot;</span>);<span class="hljs-type">int</span> p;<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; tea[i].dex; j++) &#123;p = j;<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> j; k &lt; tea[i].dex; k++) &#123;<span class="hljs-keyword">if</span> (stu[tea[i].a[p]].score &gt; stu[tea[i].a[k]].score) &#123;p = k;&#125;&#125;t = stu[tea[i].a[j]];stu[tea[i].a[j]] = stu[tea[i].a[p]];stu[tea[i].a[p]] = t;&#125;<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; tea[i].dex; j++) &#123;System.out.print(stu[tea[i].a[j]].getName() + <span class="hljs-string">&quot;: &quot;</span>);System.out.print(stu[tea[i].a[j]].getScore() + <span class="hljs-string">&quot; &quot;</span>);<span class="hljs-keyword">if</span> (stu[tea[i].a[j]].getScore() &lt; <span class="hljs-number">60</span>) &#123;System.out.print(<span class="hljs-string">&quot;差&quot;</span>);&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (stu[tea[i].a[j]].getScore() &gt;= <span class="hljs-number">60</span> &amp;&amp; stu[tea[i].a[j]].getScore() &lt; <span class="hljs-number">90</span>) &#123;System.out.print(<span class="hljs-string">&quot;良&quot;</span>);&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (stu[tea[i].a[j]].getScore() &gt;= <span class="hljs-number">90</span>) &#123;System.out.print(<span class="hljs-string">&quot;优&quot;</span>);&#125;System.out.print(<span class="hljs-string">&quot;\n&quot;</span>);&#125;<span class="hljs-keyword">break</span>;&#125;&#125;&#125;<span class="hljs-comment">//----------------------------------------------------------------------------------------</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">dexchange</span><span class="hljs-params">(Teachers[] tea, <span class="hljs-type">int</span> at)</span> &#123;<span class="hljs-comment">// 出题数目更改</span><span class="hljs-comment">// TODO dexchange</span><span class="hljs-meta">@SuppressWarnings(&quot;resource&quot;)</span><span class="hljs-type">Scanner</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>, str = <span class="hljs-string">&quot;&quot;</span>;<span class="hljs-type">int</span> n, flag = <span class="hljs-number">0</span>;System.out.println(<span class="hljs-string">&quot;请输入教师姓名:&quot;</span>);<span class="hljs-keyword">do</span> &#123;str = input.next();<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; at; i++) &#123;<span class="hljs-keyword">if</span> (tea[i].getName().equals(str)) &#123;flag = <span class="hljs-number">1</span>;System.out.println(<span class="hljs-string">&quot;是否确认更改(Y/N)注：默认:教授5/副教授4/讲师3&quot;</span>);s = input.next();<span class="hljs-keyword">if</span> (s.charAt(<span class="hljs-number">0</span>) == <span class="hljs-string">&#x27;Y&#x27;</span> || s.charAt(<span class="hljs-number">0</span>) == <span class="hljs-string">&#x27;y&#x27;</span>) &#123;System.out.println(<span class="hljs-string">&quot;请输入更改后出题数目：&quot;</span>);n = input.nextInt();tea[i].setnum(n);<span class="hljs-comment">// 控制教师所出题目数量，以保证出题数更改后先前题目会丢失！！！</span>System.out.println(<span class="hljs-string">&quot;题目数已更改！请重新出题:&quot;</span>);<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; tea[i].getnum(); j++) &#123;System.out.println(<span class="hljs-string">&quot;请输入第&quot;</span> + (j + <span class="hljs-number">1</span>) + <span class="hljs-string">&quot;题：&quot;</span>);tea[i].question[j] = input.next();&#125;&#125;<span class="hljs-keyword">break</span>;&#125;&#125;<span class="hljs-keyword">if</span> (flag == <span class="hljs-number">0</span>) &#123;System.out.println(<span class="hljs-string">&quot;查无此人请重新输入：&quot;</span>);&#125;&#125; <span class="hljs-keyword">while</span> (flag == <span class="hljs-number">0</span>);&#125;<span class="hljs-comment">//----------------------------------------------------------------------------------------</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">queshow</span><span class="hljs-params">(Teachers[] tea, <span class="hljs-type">int</span> at)</span> &#123;<span class="hljs-comment">// 所有题目展示</span><span class="hljs-comment">// TODO dexchange</span><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; at; i++) &#123;<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; tea[i].getnum(); j++) &#123;System.out.print(tea[i].question[j] + <span class="hljs-string">&quot;  &quot;</span>);<span class="hljs-keyword">if</span> (tea[i].b[j] == <span class="hljs-number">1</span>) &#123;showR();<span class="hljs-comment">// 已经被选</span>&#125; <span class="hljs-keyword">else</span> &#123;showN();<span class="hljs-comment">// 未被选择</span>&#125;&#125;&#125;&#125;<span class="hljs-comment">//----------------------------------------------------------------------------------------</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showR</span><span class="hljs-params">()</span> &#123;<span class="hljs-comment">// 输出“该题已经被选”</span>System.out.println(<span class="hljs-string">&quot;该题目已经被选&quot;</span>);&#125;<span class="hljs-comment">//----------------------------------------------------------------------------------------</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showN</span><span class="hljs-params">()</span> &#123;<span class="hljs-comment">// 输出“该题未被选”</span>System.out.println(<span class="hljs-string">&quot;该题目可选择&quot;</span>);&#125;<span class="hljs-comment">//----------------------------------------------------------------------------------------</span><span class="hljs-meta">@SuppressWarnings(&quot;static-access&quot;)</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> AWTException &#123;<span class="hljs-comment">// 主类（菜单显示，菜单选项）</span><span class="hljs-comment">// TODO main</span><span class="hljs-meta">@SuppressWarnings(&quot;resource&quot;)</span><span class="hljs-comment">//----------------------------------------------------------------------------------------</span><span class="hljs-comment">//初始化设置</span><span class="hljs-type">Scanner</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<span class="hljs-type">Clear</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Clear</span>();<span class="hljs-meta">@SuppressWarnings(&quot;unused&quot;)</span><span class="hljs-type">String</span> <span class="hljs-variable">select</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>, balabala = <span class="hljs-string">&quot;&quot;</span>;<span class="hljs-type">int</span> <span class="hljs-variable">teaNum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, at = <span class="hljs-number">3</span>, stunum = <span class="hljs-number">0</span>, num = <span class="hljs-number">0</span>, n = <span class="hljs-number">0</span>;Teachers[] tea = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Teachers</span>[<span class="hljs-number">20</span>];Students[] stu = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Students</span>[<span class="hljs-number">20</span>];tea[<span class="hljs-number">0</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Teachers</span>(<span class="hljs-string">&quot;唐长老&quot;</span>, <span class="hljs-string">&quot;教授&quot;</span>, <span class="hljs-number">5</span>);tea[<span class="hljs-number">1</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Teachers</span>(<span class="hljs-string">&quot;莉莉&quot;</span>, <span class="hljs-string">&quot;副教授&quot;</span>, <span class="hljs-number">4</span>);tea[<span class="hljs-number">2</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Teachers</span>(<span class="hljs-string">&quot;叶飞&quot;</span>, <span class="hljs-string">&quot;讲师&quot;</span>, <span class="hljs-number">3</span>);tea[<span class="hljs-number">0</span>].question[<span class="hljs-number">0</span>] = <span class="hljs-string">&quot;新式算法的应用设计&quot;</span>;tea[<span class="hljs-number">0</span>].question[<span class="hljs-number">1</span>] = <span class="hljs-string">&quot;网络安全软件的设计&quot;</span>;tea[<span class="hljs-number">0</span>].question[<span class="hljs-number">2</span>] = <span class="hljs-string">&quot;单片机嵌入式的设计&quot;</span>;tea[<span class="hljs-number">0</span>].question[<span class="hljs-number">3</span>] = <span class="hljs-string">&quot;教师管理系统的设计&quot;</span>;tea[<span class="hljs-number">0</span>].question[<span class="hljs-number">4</span>] = <span class="hljs-string">&quot;教务在线系统的设计&quot;</span>;tea[<span class="hljs-number">1</span>].question[<span class="hljs-number">0</span>] = <span class="hljs-string">&quot;医院管理系统的设计&quot;</span>;tea[<span class="hljs-number">1</span>].question[<span class="hljs-number">1</span>] = <span class="hljs-string">&quot;销售管理系统的设计&quot;</span>;tea[<span class="hljs-number">1</span>].question[<span class="hljs-number">2</span>] = <span class="hljs-string">&quot;班级管理系统的设计&quot;</span>;tea[<span class="hljs-number">1</span>].question[<span class="hljs-number">3</span>] = <span class="hljs-string">&quot;财务管理系统的设计&quot;</span>;tea[<span class="hljs-number">2</span>].question[<span class="hljs-number">0</span>] = <span class="hljs-string">&quot;菜单管理系统的设计&quot;</span>;tea[<span class="hljs-number">2</span>].question[<span class="hljs-number">1</span>] = <span class="hljs-string">&quot;游戏运行系统的设计&quot;</span>;tea[<span class="hljs-number">2</span>].question[<span class="hljs-number">2</span>] = <span class="hljs-string">&quot;图书管理系统的设计&quot;</span>;<span class="hljs-comment">//----------------------------------------------------------------------------------------</span>System.out.println(<span class="hljs-string">&quot;本程序作者：敲代码的猫 ||注：添加学生和教师人数不要超过10&quot;</span>);System.out.println(<span class="hljs-string">&quot;确认？（Y/N）(选N也得确认，呵)&quot;</span>);select = input.next();<span class="hljs-comment">//----------------------------------------------------------------------------------------</span><span class="hljs-keyword">do</span> &#123;r.clear();System.out.println(<span class="hljs-string">&quot;    毕业设计题目分配菜单选项：&quot;</span>);System.out.println(<span class="hljs-string">&quot;      1. 当前指导教师信息显示&quot;</span>);System.out.println(<span class="hljs-string">&quot;      2. 指导教师信息添加&quot;</span>);System.out.println(<span class="hljs-string">&quot;      3. 学生信息添加&quot;</span>);System.out.println(<span class="hljs-string">&quot;      4. 学生信息展示&quot;</span>);System.out.println(<span class="hljs-string">&quot;      5. 毕业设计题目分配&quot;</span>);System.out.println(<span class="hljs-string">&quot;      6. 学生更换题目&quot;</span>);System.out.println(<span class="hljs-string">&quot;      7. 指导教师评判成绩&quot;</span>);System.out.println(<span class="hljs-string">&quot;      8. 成绩显示&quot;</span>);System.out.println(<span class="hljs-string">&quot;      9. 教师出题数目更改&quot;</span>);System.out.println(<span class="hljs-string">&quot;      0. 退出\n\n&quot;</span>);System.out.print(<span class="hljs-string">&quot;请输入数字键输入菜单选项：&quot;</span>);n = input.nextInt();<span class="hljs-keyword">switch</span> (n) &#123;<span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:r.clear();System.out.println(<span class="hljs-string">&quot;指导教师信息显示:&quot;</span>);<span class="hljs-comment">//</span>teaShow(at, tea, teaNum);System.out.println(<span class="hljs-string">&quot;\n按任意键返回上一级&quot;</span>);balabala = input.next();<span class="hljs-keyword">break</span>;<span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:r.clear();System.out.println(<span class="hljs-string">&quot;指导教师信息添加:\n\n&quot;</span>);<span class="hljs-comment">//</span>System.out.println(<span class="hljs-string">&quot;请输入添加指导教师人数：&quot;</span>);teaNum = input.nextInt();at += teaNum;teaAdd(teaNum, tea, at);System.out.println(<span class="hljs-string">&quot;\n按任意键返回上一级&quot;</span>);balabala = input.next();<span class="hljs-keyword">break</span>;<span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:r.clear();System.out.println(<span class="hljs-string">&quot;学生信息添加:&quot;</span>);<span class="hljs-comment">//</span>System.out.println(<span class="hljs-string">&quot;请输入学生人数：&quot;</span>);num = input.nextInt();stunum += num;stuAdd(num, stunum, tea, at, stu);System.out.println(<span class="hljs-string">&quot;\n按任意键返回上一级&quot;</span>);balabala = input.next();<span class="hljs-keyword">break</span>;<span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:r.clear();System.out.println(<span class="hljs-string">&quot;学生信息展示:&quot;</span>);<span class="hljs-comment">//</span>System.out.println(<span class="hljs-string">&quot;\n当前学生信息：&quot;</span>);stuShow(stunum, stu);System.out.println(<span class="hljs-string">&quot;\n按任意键返回上一级&quot;</span>);balabala = input.next();<span class="hljs-keyword">break</span>;<span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:r.clear();System.out.println(<span class="hljs-string">&quot;毕业设计题目分配:\n\n&quot;</span>);<span class="hljs-comment">//</span>graShow(stu, tea, at);System.out.println(<span class="hljs-string">&quot;\n按任意键返回上一级&quot;</span>);balabala = input.next();<span class="hljs-keyword">break</span>;<span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:r.clear();System.out.println(<span class="hljs-string">&quot;学生更换设计题目:&quot;</span>);<span class="hljs-comment">//</span>stuExchange(stunum, tea, at, stu);System.out.println(<span class="hljs-string">&quot;\n按任意键返回上一级&quot;</span>);balabala = input.next();<span class="hljs-keyword">break</span>;<span class="hljs-keyword">case</span> <span class="hljs-number">7</span>:r.clear();System.out.println(<span class="hljs-string">&quot;指导教师评判成绩:\n\n&quot;</span>);<span class="hljs-comment">//</span>juDge(stu, tea, at);System.out.println(<span class="hljs-string">&quot;\n按任意键返回上一级&quot;</span>);balabala = input.next();<span class="hljs-keyword">break</span>;<span class="hljs-keyword">case</span> <span class="hljs-number">8</span>:r.clear();System.out.println(<span class="hljs-string">&quot;成绩显示:&quot;</span>);<span class="hljs-comment">//</span>scoShow(stu, tea, at);System.out.println(<span class="hljs-string">&quot;\n按任意键返回上一级&quot;</span>);balabala = input.next();<span class="hljs-keyword">break</span>;<span class="hljs-keyword">case</span> <span class="hljs-number">9</span>:r.clear();System.out.println(<span class="hljs-string">&quot;教师出题数目更改:&quot;</span>);<span class="hljs-comment">//</span>System.out.println(<span class="hljs-string">&quot;！注：学生已选题的教师信息不能更改！&quot;</span>);dexchange(tea, at);System.out.println(<span class="hljs-string">&quot;\n按任意键返回上一级&quot;</span>);balabala = input.next();<span class="hljs-keyword">break</span>;<span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<span class="hljs-comment">// 退出</span>r.clear();<span class="hljs-keyword">break</span>;<span class="hljs-keyword">default</span>:r.clear();System.out.println(<span class="hljs-string">&quot;出现错误,按任意键返回&quot;</span>);<span class="hljs-comment">//</span>balabala = input.next();<span class="hljs-keyword">break</span>;&#125;&#125; <span class="hljs-keyword">while</span> (n != <span class="hljs-number">0</span>);<span class="hljs-comment">//----------------------------------------------------------------------------------------</span>System.out.println(<span class="hljs-string">&quot;已退出&quot;</span>);<span class="hljs-comment">//</span><span class="hljs-comment">/*</span><span class="hljs-comment"> * 模板 教师信息初始 3个 教师信息添加 教师信息展示 学生信息录入 学生信息展示 学生选题（教师\题目） 毕业设计题目分配展示</span><span class="hljs-comment"> */</span><span class="hljs-comment">/*</span><span class="hljs-comment"> * 第二次更改 1.填加学生更换题目功能 2.添加教师评分功能 3.添加成绩显示功能，并且成绩分为优良差，还要排序=_=</span><span class="hljs-comment"> */</span><span class="hljs-comment">/*</span><span class="hljs-comment"> * 第三次更改 1.填写错误如何更改// 2.人数更改功能，即传说中的可扩展性// 3.一个教师出可多个题目</span><span class="hljs-comment"> */</span><span class="hljs-comment">/*</span><span class="hljs-comment"> * 第四次 待改进bug 1.教师信息添加（在信息添加过一次后，第二次添加报错）//</span><span class="hljs-comment"> */</span><span class="hljs-comment">/*</span><span class="hljs-comment"> * 第五次更改 1.教师出题已被选择的题目会显示被选择</span><span class="hljs-comment"> * </span><span class="hljs-comment"> */</span>&#125;&#125;</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
